// Copyright (c) The Cortex Authors.
// Licensed under the Apache License 2.0.

syntax = "proto3";

package queryrange;

option go_package = "github.com/thanos-io/thanos/internal/cortex/querier/queryrange";

import "cortex/cortexpb/cortex.proto";
import "google/protobuf/any.proto";

message PrometheusRequestHeader {
  // @gotags: json:"-"
  string Name = 1;
  // @gotags: json:"-"
  repeated string Values = 2;
}
message PrometheusRequest {
  string path = 1;
  int64 start = 2;
  int64 end = 3;
  int64 step = 4;
  Duration timeout = 5;
  string query = 6;
  CachingOptions cachingOptions = 7;
  // @gotags: json:"-"
  repeated PrometheusRequestHeader Headers = 8;
  string stats = 9;
}

message PrometheusResponseHeader {
  // @gotags: json:"-"
  string Name = 1;
  // @gotags: json:"-"
  repeated string Values = 2;
}

message PrometheusResponse {
  // @gotags: json:"status"
  string Status = 1;
  // @gotags: json:"data,omitempty"
  PrometheusData Data = 2;
  // @gotags: json:"errorType,omitempty"
  string ErrorType = 3;
  // @gotags: json:"error,omitempty"
  string Error = 4;
  // @gotags: json:"-"
  repeated PrometheusResponseHeader Headers = 5;
  // @gotags: json:"warnings,omitempty"
  repeated string Warnings = 6;
}

message PrometheusData {
  // @gotags: json:"resultType"
  string ResultType = 1;
  // @gotags: json:"result"
  repeated SampleStream Result = 2;
  // @gotags: json:"stats,omitempty"
  PrometheusResponseStats stats = 3;
  // @gotags: json:"analysis"
  Analysis analysis = 4;
}

message PrometheusInstantQueryResponse {
  // @gotags: json:"status"
  string Status = 1;
  // @gotags: json:"data,omitempty"
  PrometheusInstantQueryData Data = 2;
  // @gotags: json:"errorType,omitempty"
  string ErrorType = 3;
  // @gotags: json:"error,omitempty"
  string Error = 4;
  // @gotags: json:"-"
  repeated PrometheusResponseHeader Headers = 5;
  // @gotags: json:"warnings,omitempty"
  repeated string Warnings = 6;
}

message PrometheusInstantQueryData {
  // @gotags: json:"resultType"
  string ResultType = 1;
  // @gotags: json:"result"
  PrometheusInstantQueryResult Result = 2;
  // @gotags: json:"stats,omitempty"
  PrometheusResponseStats stats = 3;
  // @gotags: json:"analysis"
  Analysis analysis = 4;
}

message PrometheusInstantQueryResult {
  oneof result {
    cortexpb.Sample scalar = 1;
    StringSample stringSample = 2;
    Vector vector = 3;
    Matrix matrix = 4;
  }
}

message Vector {
  repeated Sample samples = 1;
}

message Matrix {
  repeated SampleStream sampleStreams = 1;
}

message PrometheusResponseStats {
  // @gotags: json:"samples"
  PrometheusResponseSamplesStats samples = 1;
}

message PrometheusResponseSamplesStats {
  // @gotags: json:"totalQueryableSamples"
  int64 totalQueryableSamples = 1;
  // @gotags: json:"totalQueryableSamplesPerStep"
  repeated PrometheusResponseQueryableSamplesStatsPerStep totalQueryableSamplesPerStep = 2;
}

message PrometheusResponseQueryableSamplesStatsPerStep {
  int64 value = 1;
  int64 timestamp_ms = 2;
}

message SampleStream {
  // @gotags: json:"metric"
  repeated cortexpb.LabelPair labels = 1;
  // @gotags: json:"values"
  repeated cortexpb.Sample samples = 2;
  // @gotags: json:"histogram"
  repeated SampleHistogramPair histograms = 3;
}

message Sample {
  // @gotags: json:"metric"
  repeated cortexpb.LabelPair labels = 1;
  // @gotags: json:"value"
  double sampleValue = 2;
  int64 timestamp = 3;
  // @gotags: json:"histogram"
  SampleHistogram histogram = 4;
}

message StringSample {
  string value = 1;
  int64 timestamp_ms = 2;
}

message SampleHistogramPair {
  int64 timestamp = 1;
  SampleHistogram histogram = 2;
}

message SampleHistogram {
  double count = 1;
  double sum = 2;
  repeated HistogramBucket buckets = 3;
}

message HistogramBucket {
  int32 boundaries = 1;
  double lower = 2;
  double upper = 3;
  double count = 4;
}

message CachedResponse  {
  // @gotags: json:"key"
  string key = 1;

  // List of cached responses; non-overlapping and in order.
  // @gotags: json:"extents"
  repeated Extent extents = 2;
}

message Extent  {
  // @gotags: json:"start"
  int64 start = 1;
  // @gotags: json:"end"
  int64 end = 2;
  // reserved the previous key to ensure cache transition
  reserved 3;
  // @gotags: json:"-"
  string trace_id = 4;
  // @gotags: json:"response"
  google.protobuf.Any response = 5;
}

message CachingOptions {
  bool disabled = 1;
}

message Explanation {
  // @gotags: json:"name"
  string name = 1;
  // @gotags: json:"children"
  repeated Explanation children = 2;
}

// A Duration represents a signed, fixed-length span of time represented
// as a count of seconds and fractions of seconds at nanosecond
// resolution. It is independent of any calendar and concepts like "day"
// or "month". It is related to Timestamp in that the difference between
// two Timestamp values is a Duration and it can be added or subtracted
// from a Timestamp. Range is approximately +-10,000 years.
//
// # Examples
//
// Example 1: Compute Duration from two Timestamps in pseudo code.
//
//     Timestamp start = ...;
//     Timestamp end = ...;
//     Duration duration = ...;
//
//     duration.seconds = end.seconds - start.seconds;
//     duration.nanos = end.nanos - start.nanos;
//
//     if (duration.seconds < 0 && duration.nanos > 0) {
//       duration.seconds += 1;
//       duration.nanos -= 1000000000;
//     } else if (duration.seconds > 0 && duration.nanos < 0) {
//       duration.seconds -= 1;
//       duration.nanos += 1000000000;
//     }
//
// Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.
//
//     Timestamp start = ...;
//     Duration duration = ...;
//     Timestamp end = ...;
//
//     end.seconds = start.seconds + duration.seconds;
//     end.nanos = start.nanos + duration.nanos;
//
//     if (end.nanos < 0) {
//       end.seconds -= 1;
//       end.nanos += 1000000000;
//     } else if (end.nanos >= 1000000000) {
//       end.seconds += 1;
//       end.nanos -= 1000000000;
//     }
//
// Example 3: Compute Duration from datetime.timedelta in Python.
//
//     td = datetime.timedelta(days=3, minutes=10)
//     duration = Duration()
//     duration.FromTimedelta(td)
//
// # JSON Mapping
//
// In JSON format, the Duration type is encoded as a string rather than an
// object, where the string ends in the suffix "s" (indicating seconds) and
// is preceded by the number of seconds, with nanoseconds expressed as
// fractional seconds. For example, 3 seconds with 0 nanoseconds should be
// encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
// be expressed in JSON format as "3.000000001s", and 3 seconds and 1
// microsecond should be expressed in JSON format as "3.000001s".
//
message Duration {
  // Signed seconds of the span of time. Must be from -315,576,000,000
  // to +315,576,000,000 inclusive. Note: these bounds are computed from:
  // 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
  int64 seconds = 1;

  // Signed fractions of a second at nanosecond resolution of the span
  // of time. Durations less than one second are represented with a 0
  // `seconds` field and a positive or negative `nanos` field. For durations
  // of one second or more, a non-zero value for the `nanos` field must be
  // of the same sign as the `seconds` field. Must be from -999,999,999
  // to +999,999,999 inclusive.
  int32 nanos = 2;
}

message Analysis {
  // @gotags: json:"name"
  string name = 1;
  // @gotags: json:"executionTime"
  Duration executionTime = 2;
  // @gotags: json:"children"
  repeated Analysis children = 3;
}
