// Copyright (c) The Thanos Authors.
// Licensed under the Apache License 2.0.

package dedup

import (
	"fmt"
	"math"
	"testing"

	"github.com/efficientgo/core/testutil"
	"github.com/prometheus/prometheus/model/labels"
	"github.com/prometheus/prometheus/storage"
	"github.com/prometheus/prometheus/tsdb/chunkenc"
)

func TestIteratorEdgeCases(t *testing.T) {
	ms := NewMergedSeries(labels.Labels{}, []storage.Series{})
	it := ms.Iterator(nil)
	testutil.Ok(t, it.Err())
	testutil.Equals(t, int64(math.MinInt64), it.AtT())
	testutil.Equals(t, chunkenc.ValNone, it.Next())
	testutil.Ok(t, it.Err())
}

func TestMergedSeriesIterator(t *testing.T) {
	for _, tcase := range []struct {
		name      string
		input     []series
		exp       []series
		isCounter bool
	}{
		// copied from dedup_test.go to make sure the result is correct if no overlaps
		{
			name: "Single dedup label",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{200000, 5}, {210000, 6}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}, {Name: "d", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}, {200000, 5}, {210000, 6}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}, {Name: "d", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}},
				},
			},
		},
		{
			name: "Multi dedup label",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{200000, 5}, {210000, 6}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}, {Name: "d", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}, {200000, 5}, {210000, 6}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}, {Name: "d", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "4"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				},
				{
					lset:    labels.Labels{{Name: "a", Value: "2"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}},
				},
			},
		},
		{
			name: "Multi dedup label - some series don't have all dedup labels",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{60000, 3}, {70000, 4}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{10000, 1}, {20000, 2}, {60000, 3}, {70000, 4}},
				},
			},
		},
		// additional tests
		{
			name:  "empty",
			input: []series{},
			exp:   []series{},
		},
		{
			name: "Multi dedup labels - data points absent",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {30000, 3}, {40000, 4}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {80000, 10}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {40000, 4}, {50000, 5}, {80000, 10}},
				},
			},
		},
		{
			name: "Avoid corrupt Values",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 23492}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				},
				{
					lset:    labels.Labels{{Name: "b", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "b", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				}, {
					lset:    labels.Labels{{Name: "b", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 1234}, {30000, 3}, {50000, 5}},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				},
				{
					lset:    labels.Labels{{Name: "b", Value: "5"}, {Name: "c", Value: "6"}},
					samples: []sample{{10000, 1}, {20000, 2}, {30000, 3}, {50000, 5}},
				},
			},
		},
		{
			name: "ignore sampling interval too small",
			input: []series{
				{
					lset: labels.Labels{{Name: "a", Value: "1"}},
					samples: []sample{
						{10000, 8.0},
						{20000, 9.0},
						{50001, 9 + 1.0},
						{60000, 9 + 2.0},
						{70000, 9 + 3.0},
						{80000, 9 + 4.0},
						{90000, 9 + 5.0},
						{100000, 9 + 6.0},
					},
				}, {
					lset: labels.Labels{{Name: "a", Value: "1"}},
					samples: []sample{
						{10001, 8.0}, // Penalty 5000 will be added.
						// 20001 was app reset. No sample, because stale marker but removed by downsample.CounterSeriesIterator. Penalty 2 * (20000 - 10000) will be added.
						// 30001 no sample. Within penalty, ignored.
						{45001, 8 + 1.0}, // Smaller timestamp, this will be chosen. CurrValue = 8.5 which is smaller than last chosen value.
						{55001, 8 + 2.0},
						{65001, 8 + 3.0},
						// {Gap} app reset. No sample, because stale marker but removed by downsample.CounterSeriesIterator.
					},
				},
			},
			exp: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}},
					samples: []sample{{10000, 8}, {20000, 9}, {45001, 9}, {50001, 10}, {55001, 10}, {65001, 11}, {80000, 13}, {90000, 14}, {100000, 15}},
				},
			},
		},
	} {
		t.Run(tcase.name, func(t *testing.T) {
			// If it is a counter then pass a function which expects a counter.
			dedupSet := NewSeriesSet(&mockedSeriesSet{series: tcase.input}, UseMergedSeries)
			var ats []storage.Series
			for dedupSet.Next() {
				ats = append(ats, dedupSet.At())
			}
			testutil.Ok(t, dedupSet.Err())
			testutil.Equals(t, len(tcase.exp), len(ats))

			for i, s := range ats {
				testutil.Equals(t, tcase.exp[i].lset, s.Labels(), "labels mismatch for series %v", i)
				res := expandSeries(t, s.Iterator(nil))
				testutil.Equals(t, tcase.exp[i].samples, res, "values mismatch for series :%v", i)
			}
		})
	}
}
func TestMergedSeriesIterator1(t *testing.T) {
	for _, tcase := range []struct {
		name  string
		input []series
	}{
		{
			name: "ES-1205037",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}, {1722032231086, 38063}, {1722032261086, 38555}, {1722032291086, 38783}, {1722032321086, 39270}, {1722032351086, 39370}, {1722032381086, 39789}, {1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032501086, 41196}, {1722032531086, 41405}, {1722032561086, 41829}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}, {1722032231086, 38063}, {1722032261086, 38555}, {1722032291086, 38783}, {1722032321086, 39270}, {1722032351086, 39370}, {1722032381086, 39789}, {1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032501086, 41196}, {1722032531086, 41405}, {1722032561086, 41829}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131}},
				},
				{
					lset: labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{
						{1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131},
					}},
			},
		},
	} {
		t.Run(tcase.name, func(t *testing.T) {
			// If it is a counter then pass a function which expects a counter.
			dedupSet := NewSeriesSet(&mockedSeriesSet{series: tcase.input}, "")
			var ats []storage.Series
			for dedupSet.Next() {
				ats = append(ats, dedupSet.At())
			}
			testutil.Ok(t, dedupSet.Err())
			for i, s := range ats {
				res := expandSeries(t, s.Iterator(nil))
				fmt.Println(res)

				if len(res) == 0 {
					continue
				}
				last := res[0].f
				for j, tf := range res {
					testutil.Equals(t, true, tf.f >= last, "counter not mono increase after merge at index [%v, %v], [i, j-1] %v, [i, j] %v", i, j, last, tf.f)
					last = tf.f
				}
			}
		})
	}
}
func TestMergedSeriesIterator2(t *testing.T) {
	for _, tcase := range []struct {
		name  string
		input []series
	}{
		{
			name: "ES-1205037",
			input: []series{{
				lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
				samples: []sample{{1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}, {1722032231086, 38063}, {1722032261086, 38555}, {1722032291086, 38783}, {1722032321086, 39270}, {1722032351086, 39370}, {1722032381086, 39789}, {1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032501086, 41196}, {1722032531086, 41405}, {1722032561086, 41829}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131}},
			},
			},
		},
	} {
		t.Run(tcase.name, func(t *testing.T) {
			// If it is a counter then pass a function which expects a counter.
			dedupSet := NewSeriesSet(&mockedSeriesSet{series: tcase.input}, UseMergedSeries)
			var ats []storage.Series
			for dedupSet.Next() {
				ats = append(ats, dedupSet.At())
			}
			testutil.Ok(t, dedupSet.Err())
			for i, s := range ats {
				res := expandSeries(t, s.Iterator(nil))
				fmt.Println(res)

				if len(res) == 0 {
					continue
				}
				last := res[0].f
				for j, tf := range res {
					testutil.Equals(t, true, tf.f >= last, "counter not mono increase after merge at index [%v, %v], [i, j-1] %v, [i, j] %v", i, j, last, tf.f)
					last = tf.f
				}
			}
		})
	}
}

func TestMergedSeriesIterator3(t *testing.T) {
	for _, tcase := range []struct {
		name  string
		input []series
	}{
		{
			name: "ES-1205037",
			input: []series{
				{
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}, {1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}, {1722032231086, 38063}, {1722032261086, 38555}, {1722032291086, 38783}, {1722032321086, 39270}, {1722032351086, 39370}, {1722032381086, 39789}, {1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032501086, 41196}, {1722032531086, 41405}, {1722032561086, 41829}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131}},
				}, {
					lset:    labels.Labels{{Name: "a", Value: "1"}, {Name: "c", Value: "3"}},
					samples: []sample{{1722029021086, 116}, {1722029051086, 1087}, {1722029081086, 1529}, {1722029111086, 1780}, {1722029141086, 2247}, {1722029171086, 2480}, {1722029201086, 2931}, {1722029231086, 3069}, {1722029261086, 3477}, {1722029291086, 3671}, {1722029321086, 4165}, {1722029351086, 4392}, {1722029381086, 4890}, {1722029411086, 5087}, {1722029441086, 5498}, {1722029471086, 5623}, {1722029501086, 6045}, {1722029531086, 6276}, {1722029561086, 6765}, {1722029591086, 6975}, {1722029621086, 7449}, {1722029651086, 7836}, {1722029681086, 8564}, {1722029711086, 8691}, {1722029741086, 9165}, {1722029771086, 9373}, {1722029801086, 9889}, {1722029831086, 10086}, {1722029861086, 10582}, {1722029891086, 10742}, {1722029921086, 11145}, {1722029951086, 11289}, {1722029981086, 11778}, {1722030011086, 11990}, {1722030041086, 12482}, {1722030071086, 12709}, {1722030101086, 13186}, {1722030131086, 13297}, {1722030161086, 13720}, {1722030191086, 13904}, {1722030221086, 14399}, {1722030251086, 14628}, {1722030281086, 15444}, {1722030311086, 15843}, {1722030341086, 16251}, {1722030371086, 16366}, {1722030401086, 16811}, {1722030431086, 17031}, {1722030461086, 17533}, {1722030491086, 17728}, {1722030521086, 18205}, {1722030551086, 18410}, {1722030581086, 18831}, {1722030611086, 18921}, {1722030641086, 19405}, {1722030671086, 19621}, {1722030701086, 20152}, {1722030731086, 20347}, {1722030761086, 20849}, {1722030791086, 20967}, {1722030821086, 21381}, {1722030851086, 21549}, {1722030881086, 22065}, {1722030911086, 22785}, {1722030941086, 23275}, {1722030971086, 23500}, {1722031001086, 23953}, {1722031031086, 24033}, {1722031061086, 24493}, {1722031091086, 24710}, {1722031121086, 25232}, {1722031151086, 25425}, {1722031181086, 25913}, {1722031211086, 26078}, {1722031241086, 26441}, {1722031271086, 26623}, {1722031301086, 27116}, {1722031331086, 27330}, {1722031361086, 27838}, {1722031391086, 28047}, {1722031421086, 28505}, {1722031451086, 28637}, {1722031481086, 29065}, {1722031511086, 29237}, {1722031541086, 30276}, {1722031571086, 30456}, {1722031601086, 30950}, {1722031631086, 31163}, {1722031661086, 31604}, {1722031691086, 31704}, {1722031721086, 32146}, {1722031751086, 32348}, {1722031781086, 32852}, {1722031811086, 33055}, {1722031841086, 33546}, {1722031871086, 33745}, {1722031901086, 34151}, {1722031931086, 34263}, {1722031961086, 34726}, {1722031991086, 34927}, {1722032021086, 35436}, {1722032051086, 35632}, {1722032081086, 36165}, {1722032111086, 36307}, {1722032141086, 36857}, {1722032171086, 37350}, {1722032201086, 37832}, {1722032231086, 38063}, {1722032261086, 38555}, {1722032291086, 38783}, {1722032321086, 39270}, {1722032351086, 39370}, {1722032381086, 39789}, {1722032411086, 39982}, {1722032441086, 40487}, {1722032471086, 40707}, {1722032501086, 41196}, {1722032531086, 41405}, {1722032561086, 41829}, {1722032591086, 41925}, {1722032621086, 42414}, {1722032651086, 42606}, {1722032681086, 43129}, {1722032711086, 43322}, {1722032741086, 43836}, {1722032771086, 44464}, {1722032801086, 44862}, {1722032831086, 45043}, {1722032861086, 45552}, {1722032891086, 45752}, {1722032921086, 46269}, {1722032951086, 46463}, {1722032981086, 46933}, {1722033011086, 47035}, {1722033041086, 47455}, {1722033071086, 47659}, {1722033101086, 48168}, {1722033131086, 48374}, {1722033161086, 48888}, {1722033191086, 49071}, {1722033221086, 49425}, {1722033251086, 49592}, {1722033281086, 50061}, {1722033311086, 50278}, {1722033341086, 50791}, {1722033371086, 51002}, {1722033401086, 52024}, {1722033431086, 52153}, {1722033461086, 52580}, {1722033491086, 52704}, {1722033521086, 53202}, {1722033551086, 53409}, {1722033581086, 53919}, {1722033611086, 54131}},
				},
			},
		},
	} {
		t.Run(tcase.name, func(t *testing.T) {
			// If it is a counter then pass a function which expects a counter.
			dedupSet := NewSeriesSet(&mockedSeriesSet{series: tcase.input}, UseMergedSeries)
			var ats []storage.Series
			for dedupSet.Next() {
				ats = append(ats, dedupSet.At())
			}
			testutil.Ok(t, dedupSet.Err())
			for i, s := range ats {
				res := expandSeries(t, s.Iterator(nil))
				fmt.Println(res)

				if len(res) == 0 {
					continue
				}
				last := res[0].f
				for j, tf := range res {
					testutil.Equals(t, true, tf.f >= last, "counter not mono increase after merge at index [%v, %v], [i, j-1] %v, [i, j] %v", i, j, last, tf.f)
					last = tf.f
				}
			}
		})
	}
}
