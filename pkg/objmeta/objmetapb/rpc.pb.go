// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: objmeta/objmetapb/rpc.proto

package objmetapb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/thanos-io/thanos/pkg/store/storepb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Source int32

const (
	Source_SOURCE_UNKNOWN Source = 0
	Source_SOURCE_CLIENT  Source = 1
	Source_SOURCE_SYNCER  Source = 2
)

var Source_name = map[int32]string{
	0: "SOURCE_UNKNOWN",
	1: "SOURCE_CLIENT",
	2: "SOURCE_SYNCER",
}

var Source_value = map[string]int32{
	"SOURCE_UNKNOWN": 0,
	"SOURCE_CLIENT":  1,
	"SOURCE_SYNCER":  2,
}

func (x Source) String() string {
	return proto.EnumName(Source_name, int32(x))
}

func (Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{0}
}

type Type int32

const (
	Type_TYPE_UNKNOWN         Type = 0
	Type_TYPE_META            Type = 1
	Type_TYPE_DELETE_MARK     Type = 2
	Type_TYPE_NO_COMPACT_MARK Type = 3
)

var Type_name = map[int32]string{
	0: "TYPE_UNKNOWN",
	1: "TYPE_META",
	2: "TYPE_DELETE_MARK",
	3: "TYPE_NO_COMPACT_MARK",
}

var Type_value = map[string]int32{
	"TYPE_UNKNOWN":         0,
	"TYPE_META":            1,
	"TYPE_DELETE_MARK":     2,
	"TYPE_NO_COMPACT_MARK": 3,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{1}
}

type SetBlockMetaRequest struct {
	BlockMeta *BlockMeta `protobuf:"bytes,1,opt,name=block_meta,json=blockMeta,proto3" json:"block_meta,omitempty"`
}

func (m *SetBlockMetaRequest) Reset()         { *m = SetBlockMetaRequest{} }
func (m *SetBlockMetaRequest) String() string { return proto.CompactTextString(m) }
func (*SetBlockMetaRequest) ProtoMessage()    {}
func (*SetBlockMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{0}
}
func (m *SetBlockMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBlockMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBlockMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBlockMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBlockMetaRequest.Merge(m, src)
}
func (m *SetBlockMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetBlockMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBlockMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBlockMetaRequest proto.InternalMessageInfo

type SetBlockMetaResponse struct {
}

func (m *SetBlockMetaResponse) Reset()         { *m = SetBlockMetaResponse{} }
func (m *SetBlockMetaResponse) String() string { return proto.CompactTextString(m) }
func (*SetBlockMetaResponse) ProtoMessage()    {}
func (*SetBlockMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{1}
}
func (m *SetBlockMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBlockMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBlockMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBlockMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBlockMetaResponse.Merge(m, src)
}
func (m *SetBlockMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetBlockMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBlockMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetBlockMetaResponse proto.InternalMessageInfo

type DelBlockMetaRequest struct {
	BlockId string `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Type    Type   `protobuf:"varint,2,opt,name=type,proto3,enum=thanos.Type" json:"type,omitempty"`
}

func (m *DelBlockMetaRequest) Reset()         { *m = DelBlockMetaRequest{} }
func (m *DelBlockMetaRequest) String() string { return proto.CompactTextString(m) }
func (*DelBlockMetaRequest) ProtoMessage()    {}
func (*DelBlockMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{2}
}
func (m *DelBlockMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelBlockMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelBlockMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelBlockMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelBlockMetaRequest.Merge(m, src)
}
func (m *DelBlockMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *DelBlockMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelBlockMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelBlockMetaRequest proto.InternalMessageInfo

type DelBlockMetaResponse struct {
	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *DelBlockMetaResponse) Reset()         { *m = DelBlockMetaResponse{} }
func (m *DelBlockMetaResponse) String() string { return proto.CompactTextString(m) }
func (*DelBlockMetaResponse) ProtoMessage()    {}
func (*DelBlockMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{3}
}
func (m *DelBlockMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelBlockMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelBlockMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelBlockMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelBlockMetaResponse.Merge(m, src)
}
func (m *DelBlockMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelBlockMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelBlockMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelBlockMetaResponse proto.InternalMessageInfo

type GetBlockMetaRequest struct {
	BlockId string `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Type    Type   `protobuf:"varint,2,opt,name=type,proto3,enum=thanos.Type" json:"type,omitempty"`
}

func (m *GetBlockMetaRequest) Reset()         { *m = GetBlockMetaRequest{} }
func (m *GetBlockMetaRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockMetaRequest) ProtoMessage()    {}
func (*GetBlockMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{4}
}
func (m *GetBlockMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockMetaRequest.Merge(m, src)
}
func (m *GetBlockMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockMetaRequest proto.InternalMessageInfo

type BlockMeta struct {
	BlockId string `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Type    Type   `protobuf:"varint,2,opt,name=type,proto3,enum=thanos.Type" json:"type,omitempty"`
	Source  Source `protobuf:"varint,3,opt,name=source,proto3,enum=thanos.Source" json:"source,omitempty"`
	Data    []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BlockMeta) Reset()         { *m = BlockMeta{} }
func (m *BlockMeta) String() string { return proto.CompactTextString(m) }
func (*BlockMeta) ProtoMessage()    {}
func (*BlockMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{5}
}
func (m *BlockMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockMeta.Merge(m, src)
}
func (m *BlockMeta) XXX_Size() int {
	return m.Size()
}
func (m *BlockMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockMeta.DiscardUnknown(m)
}

var xxx_messageInfo_BlockMeta proto.InternalMessageInfo

type GetBlockMetaResponse struct {
	BlockMeta *BlockMeta `protobuf:"bytes,1,opt,name=block_meta,json=blockMeta,proto3" json:"block_meta,omitempty"`
}

func (m *GetBlockMetaResponse) Reset()         { *m = GetBlockMetaResponse{} }
func (m *GetBlockMetaResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlockMetaResponse) ProtoMessage()    {}
func (*GetBlockMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{6}
}
func (m *GetBlockMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockMetaResponse.Merge(m, src)
}
func (m *GetBlockMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockMetaResponse proto.InternalMessageInfo

type ExistsBlockMetaRequest struct {
	BlockId string `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Type    Type   `protobuf:"varint,2,opt,name=type,proto3,enum=thanos.Type" json:"type,omitempty"`
}

func (m *ExistsBlockMetaRequest) Reset()         { *m = ExistsBlockMetaRequest{} }
func (m *ExistsBlockMetaRequest) String() string { return proto.CompactTextString(m) }
func (*ExistsBlockMetaRequest) ProtoMessage()    {}
func (*ExistsBlockMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{7}
}
func (m *ExistsBlockMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExistsBlockMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExistsBlockMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExistsBlockMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistsBlockMetaRequest.Merge(m, src)
}
func (m *ExistsBlockMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExistsBlockMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistsBlockMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExistsBlockMetaRequest proto.InternalMessageInfo

type ExistsBlockMetaResponse struct {
	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *ExistsBlockMetaResponse) Reset()         { *m = ExistsBlockMetaResponse{} }
func (m *ExistsBlockMetaResponse) String() string { return proto.CompactTextString(m) }
func (*ExistsBlockMetaResponse) ProtoMessage()    {}
func (*ExistsBlockMetaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{8}
}
func (m *ExistsBlockMetaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExistsBlockMetaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExistsBlockMetaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExistsBlockMetaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistsBlockMetaResponse.Merge(m, src)
}
func (m *ExistsBlockMetaResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExistsBlockMetaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistsBlockMetaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExistsBlockMetaResponse proto.InternalMessageInfo

type ListBlocksRequest struct {
}

func (m *ListBlocksRequest) Reset()         { *m = ListBlocksRequest{} }
func (m *ListBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*ListBlocksRequest) ProtoMessage()    {}
func (*ListBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{9}
}
func (m *ListBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlocksRequest.Merge(m, src)
}
func (m *ListBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlocksRequest proto.InternalMessageInfo

type ListBlocksResponse struct {
	BlockId []string `protobuf:"bytes,1,rep,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (m *ListBlocksResponse) Reset()         { *m = ListBlocksResponse{} }
func (m *ListBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*ListBlocksResponse) ProtoMessage()    {}
func (*ListBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7eac148094701c96, []int{10}
}
func (m *ListBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlocksResponse.Merge(m, src)
}
func (m *ListBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlocksResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("thanos.Source", Source_name, Source_value)
	proto.RegisterEnum("thanos.Type", Type_name, Type_value)
	proto.RegisterType((*SetBlockMetaRequest)(nil), "thanos.SetBlockMetaRequest")
	proto.RegisterType((*SetBlockMetaResponse)(nil), "thanos.SetBlockMetaResponse")
	proto.RegisterType((*DelBlockMetaRequest)(nil), "thanos.DelBlockMetaRequest")
	proto.RegisterType((*DelBlockMetaResponse)(nil), "thanos.DelBlockMetaResponse")
	proto.RegisterType((*GetBlockMetaRequest)(nil), "thanos.GetBlockMetaRequest")
	proto.RegisterType((*BlockMeta)(nil), "thanos.BlockMeta")
	proto.RegisterType((*GetBlockMetaResponse)(nil), "thanos.GetBlockMetaResponse")
	proto.RegisterType((*ExistsBlockMetaRequest)(nil), "thanos.ExistsBlockMetaRequest")
	proto.RegisterType((*ExistsBlockMetaResponse)(nil), "thanos.ExistsBlockMetaResponse")
	proto.RegisterType((*ListBlocksRequest)(nil), "thanos.ListBlocksRequest")
	proto.RegisterType((*ListBlocksResponse)(nil), "thanos.ListBlocksResponse")
}

func init() { proto.RegisterFile("objmeta/objmetapb/rpc.proto", fileDescriptor_7eac148094701c96) }

var fileDescriptor_7eac148094701c96 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0x65, 0x81, 0x92, 0x30, 0x75, 0xa8, 0x59, 0xac, 0x14, 0x9c, 0xca, 0x45, 0x3e, 0xb4, 0x28,
	0xaa, 0x70, 0x44, 0xbf, 0x00, 0x88, 0x45, 0x51, 0xc0, 0x44, 0x8b, 0x51, 0x94, 0x5e, 0x90, 0x0d,
	0xab, 0x94, 0x34, 0x8d, 0x5d, 0xd6, 0x91, 0x9a, 0x7b, 0x7b, 0xef, 0x67, 0xe5, 0x98, 0x63, 0x8f,
	0x2d, 0xfc, 0x48, 0xe5, 0xb5, 0x0d, 0xa6, 0xb8, 0x39, 0x34, 0xbd, 0xd8, 0xb3, 0x6f, 0x66, 0xdf,
	0xbc, 0x9d, 0x9d, 0x59, 0x38, 0x70, 0xec, 0xcb, 0x4f, 0xd4, 0xb3, 0xb4, 0xf0, 0xef, 0xda, 0xda,
	0xdc, 0x9d, 0xd4, 0xdd, 0xb9, 0xe3, 0x39, 0x38, 0xe7, 0x7d, 0xb0, 0xae, 0x1d, 0x26, 0x57, 0x98,
	0xe7, 0xcc, 0xa9, 0xc6, 0xbf, 0xae, 0xad, 0x79, 0xb7, 0x2e, 0x65, 0x41, 0x88, 0x2c, 0x5d, 0x38,
	0x17, 0x0e, 0x37, 0x35, 0xdf, 0x0a, 0x50, 0xb5, 0x03, 0xa5, 0x21, 0xf5, 0x5a, 0x57, 0xce, 0xe4,
	0x63, 0x9f, 0x7a, 0x16, 0xa1, 0x9f, 0x6f, 0x28, 0xf3, 0xf0, 0x11, 0x80, 0xed, 0x63, 0x63, 0x3f,
	0x53, 0x19, 0x55, 0x51, 0xed, 0x69, 0xa3, 0x58, 0x0f, 0x92, 0xd4, 0xd7, 0xd1, 0x79, 0x3b, 0x32,
	0xd5, 0x7d, 0x90, 0x36, 0x89, 0x98, 0xeb, 0x5c, 0x33, 0xaa, 0x12, 0x28, 0x1d, 0xd3, 0xab, 0xad,
	0x04, 0x15, 0xd8, 0x0d, 0x12, 0xcc, 0xa6, 0x9c, 0x3e, 0x4f, 0x76, 0xf8, 0xba, 0x3b, 0xc5, 0x55,
	0xc8, 0xfa, 0xba, 0xcb, 0xe9, 0x2a, 0xaa, 0x15, 0x1a, 0x42, 0x94, 0xd5, 0xbc, 0x75, 0x29, 0xe1,
	0x1e, 0xf5, 0x0d, 0x48, 0x9b, 0x9c, 0x41, 0x2e, 0x2c, 0xc1, 0x13, 0xfa, 0x65, 0xc6, 0x3c, 0xce,
	0xb8, 0x4b, 0x82, 0x85, 0xaf, 0xa0, 0x93, 0x70, 0xc4, 0x47, 0x29, 0xf8, 0x8a, 0x20, 0xbf, 0x62,
	0x7c, 0x14, 0x15, 0x7e, 0x05, 0x39, 0xe6, 0xdc, 0xcc, 0x27, 0xb4, 0x9c, 0xe1, 0x31, 0x85, 0x28,
	0x66, 0xc8, 0x51, 0x12, 0x7a, 0x31, 0x86, 0xec, 0xd4, 0xf2, 0xac, 0x72, 0xb6, 0x8a, 0x6a, 0x02,
	0xe1, 0xb6, 0xfa, 0x0e, 0xa4, 0x4e, 0x42, 0xd1, 0xff, 0xe1, 0xfa, 0x46, 0xb0, 0xaf, 0xfb, 0xd5,
	0x62, 0xff, 0xb7, 0x4e, 0x1a, 0x3c, 0xdf, 0xa2, 0x7d, 0xf0, 0xb2, 0x4a, 0x50, 0xec, 0xcd, 0x58,
	0x70, 0x24, 0x16, 0x4a, 0x50, 0x35, 0xc0, 0x71, 0x30, 0x24, 0xd8, 0x14, 0x96, 0x89, 0x09, 0x3b,
	0x6c, 0x41, 0x6e, 0x18, 0x55, 0xad, 0x30, 0x1c, 0x8c, 0x48, 0x5b, 0x1f, 0x8f, 0x8c, 0x13, 0x63,
	0x70, 0x66, 0x88, 0x29, 0x5c, 0x84, 0xbd, 0x10, 0x6b, 0xf7, 0xba, 0xba, 0x61, 0x8a, 0x28, 0x06,
	0x0d, 0xcf, 0x8d, 0xb6, 0x4e, 0xc4, 0xf4, 0xe1, 0x19, 0x64, 0xfd, 0x83, 0x60, 0x11, 0x04, 0xf3,
	0xfc, 0x34, 0xbe, 0x7f, 0x0f, 0xf2, 0x1c, 0xe9, 0xeb, 0x66, 0x53, 0x44, 0x58, 0x02, 0x91, 0x2f,
	0x8f, 0xf5, 0x9e, 0x6e, 0xea, 0xe3, 0x7e, 0x93, 0x9c, 0x88, 0x69, 0x5c, 0x06, 0x89, 0xa3, 0xc6,
	0x60, 0xdc, 0x1e, 0xf4, 0x4f, 0x9b, 0x6d, 0x33, 0xf0, 0x64, 0x1a, 0xdf, 0x32, 0xb0, 0x33, 0xb0,
	0x2f, 0x79, 0xe7, 0x74, 0x41, 0x88, 0x4f, 0x0d, 0x3e, 0x58, 0x5d, 0xfe, 0x76, 0xc7, 0xca, 0x2f,
	0x92, 0x9d, 0x61, 0x39, 0xba, 0x20, 0xc4, 0x87, 0x62, 0x4d, 0x95, 0x30, 0x7e, 0x6b, 0xaa, 0xc4,
	0x39, 0xea, 0x82, 0xd0, 0x49, 0x54, 0xd5, 0x79, 0x48, 0x55, 0x62, 0x27, 0x12, 0x78, 0xf6, 0x47,
	0x03, 0x60, 0x25, 0xda, 0x90, 0xdc, 0x70, 0xf2, 0xcb, 0xbf, 0xfa, 0x43, 0x4e, 0x1d, 0x60, 0xdd,
	0x0e, 0xb8, 0x12, 0x85, 0x6f, 0xf5, 0x8d, 0x2c, 0x27, 0xb9, 0x02, 0x92, 0x23, 0xd4, 0x7a, 0x7d,
	0xf7, 0x4b, 0x49, 0xdd, 0x2d, 0x14, 0x74, 0xbf, 0x50, 0xd0, 0xcf, 0x85, 0x82, 0xbe, 0x2f, 0x95,
	0xd4, 0xfd, 0x52, 0x49, 0xfd, 0x58, 0x2a, 0xa9, 0xf7, 0xf9, 0xd5, 0x33, 0x6b, 0xe7, 0xf8, 0x53,
	0xf9, 0xf6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0x7d, 0x8d, 0x7b, 0x82, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ObjMetaClient is the client API for ObjMeta service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObjMetaClient interface {
	SetBlockMeta(ctx context.Context, in *SetBlockMetaRequest, opts ...grpc.CallOption) (*SetBlockMetaResponse, error)
	DelBlockMeta(ctx context.Context, in *DelBlockMetaRequest, opts ...grpc.CallOption) (*DelBlockMetaResponse, error)
	GetBlockMeta(ctx context.Context, in *GetBlockMetaRequest, opts ...grpc.CallOption) (*GetBlockMetaResponse, error)
	ExistsBlockMeta(ctx context.Context, in *ExistsBlockMetaRequest, opts ...grpc.CallOption) (*ExistsBlockMetaResponse, error)
	ListBlocks(ctx context.Context, in *ListBlocksRequest, opts ...grpc.CallOption) (ObjMeta_ListBlocksClient, error)
}

type objMetaClient struct {
	cc *grpc.ClientConn
}

func NewObjMetaClient(cc *grpc.ClientConn) ObjMetaClient {
	return &objMetaClient{cc}
}

func (c *objMetaClient) SetBlockMeta(ctx context.Context, in *SetBlockMetaRequest, opts ...grpc.CallOption) (*SetBlockMetaResponse, error) {
	out := new(SetBlockMetaResponse)
	err := c.cc.Invoke(ctx, "/thanos.ObjMeta/SetBlockMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objMetaClient) DelBlockMeta(ctx context.Context, in *DelBlockMetaRequest, opts ...grpc.CallOption) (*DelBlockMetaResponse, error) {
	out := new(DelBlockMetaResponse)
	err := c.cc.Invoke(ctx, "/thanos.ObjMeta/DelBlockMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objMetaClient) GetBlockMeta(ctx context.Context, in *GetBlockMetaRequest, opts ...grpc.CallOption) (*GetBlockMetaResponse, error) {
	out := new(GetBlockMetaResponse)
	err := c.cc.Invoke(ctx, "/thanos.ObjMeta/GetBlockMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objMetaClient) ExistsBlockMeta(ctx context.Context, in *ExistsBlockMetaRequest, opts ...grpc.CallOption) (*ExistsBlockMetaResponse, error) {
	out := new(ExistsBlockMetaResponse)
	err := c.cc.Invoke(ctx, "/thanos.ObjMeta/ExistsBlockMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objMetaClient) ListBlocks(ctx context.Context, in *ListBlocksRequest, opts ...grpc.CallOption) (ObjMeta_ListBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ObjMeta_serviceDesc.Streams[0], "/thanos.ObjMeta/ListBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &objMetaListBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjMeta_ListBlocksClient interface {
	Recv() (*ListBlocksResponse, error)
	grpc.ClientStream
}

type objMetaListBlocksClient struct {
	grpc.ClientStream
}

func (x *objMetaListBlocksClient) Recv() (*ListBlocksResponse, error) {
	m := new(ListBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ObjMetaServer is the server API for ObjMeta service.
type ObjMetaServer interface {
	SetBlockMeta(context.Context, *SetBlockMetaRequest) (*SetBlockMetaResponse, error)
	DelBlockMeta(context.Context, *DelBlockMetaRequest) (*DelBlockMetaResponse, error)
	GetBlockMeta(context.Context, *GetBlockMetaRequest) (*GetBlockMetaResponse, error)
	ExistsBlockMeta(context.Context, *ExistsBlockMetaRequest) (*ExistsBlockMetaResponse, error)
	ListBlocks(*ListBlocksRequest, ObjMeta_ListBlocksServer) error
}

// UnimplementedObjMetaServer can be embedded to have forward compatible implementations.
type UnimplementedObjMetaServer struct {
}

func (*UnimplementedObjMetaServer) SetBlockMeta(ctx context.Context, req *SetBlockMetaRequest) (*SetBlockMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlockMeta not implemented")
}
func (*UnimplementedObjMetaServer) DelBlockMeta(ctx context.Context, req *DelBlockMetaRequest) (*DelBlockMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBlockMeta not implemented")
}
func (*UnimplementedObjMetaServer) GetBlockMeta(ctx context.Context, req *GetBlockMetaRequest) (*GetBlockMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockMeta not implemented")
}
func (*UnimplementedObjMetaServer) ExistsBlockMeta(ctx context.Context, req *ExistsBlockMetaRequest) (*ExistsBlockMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsBlockMeta not implemented")
}
func (*UnimplementedObjMetaServer) ListBlocks(req *ListBlocksRequest, srv ObjMeta_ListBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBlocks not implemented")
}

func RegisterObjMetaServer(s *grpc.Server, srv ObjMetaServer) {
	s.RegisterService(&_ObjMeta_serviceDesc, srv)
}

func _ObjMeta_SetBlockMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBlockMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjMetaServer).SetBlockMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thanos.ObjMeta/SetBlockMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjMetaServer).SetBlockMeta(ctx, req.(*SetBlockMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjMeta_DelBlockMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBlockMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjMetaServer).DelBlockMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thanos.ObjMeta/DelBlockMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjMetaServer).DelBlockMeta(ctx, req.(*DelBlockMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjMeta_GetBlockMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjMetaServer).GetBlockMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thanos.ObjMeta/GetBlockMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjMetaServer).GetBlockMeta(ctx, req.(*GetBlockMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjMeta_ExistsBlockMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsBlockMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjMetaServer).ExistsBlockMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thanos.ObjMeta/ExistsBlockMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjMetaServer).ExistsBlockMeta(ctx, req.(*ExistsBlockMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjMeta_ListBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjMetaServer).ListBlocks(m, &objMetaListBlocksServer{stream})
}

type ObjMeta_ListBlocksServer interface {
	Send(*ListBlocksResponse) error
	grpc.ServerStream
}

type objMetaListBlocksServer struct {
	grpc.ServerStream
}

func (x *objMetaListBlocksServer) Send(m *ListBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ObjMeta_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thanos.ObjMeta",
	HandlerType: (*ObjMetaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetBlockMeta",
			Handler:    _ObjMeta_SetBlockMeta_Handler,
		},
		{
			MethodName: "DelBlockMeta",
			Handler:    _ObjMeta_DelBlockMeta_Handler,
		},
		{
			MethodName: "GetBlockMeta",
			Handler:    _ObjMeta_GetBlockMeta_Handler,
		},
		{
			MethodName: "ExistsBlockMeta",
			Handler:    _ObjMeta_ExistsBlockMeta_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBlocks",
			Handler:       _ObjMeta_ListBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "objmeta/objmetapb/rpc.proto",
}

func (m *SetBlockMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBlockMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBlockMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockMeta != nil {
		{
			size, err := m.BlockMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetBlockMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBlockMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBlockMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DelBlockMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelBlockMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelBlockMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelBlockMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelBlockMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelBlockMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.Source != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockMeta != nil {
		{
			size, err := m.BlockMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExistsBlockMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistsBlockMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExistsBlockMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExistsBlockMetaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExistsBlockMetaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExistsBlockMetaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockId) > 0 {
		for iNdEx := len(m.BlockId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockId[iNdEx])
			copy(dAtA[i:], m.BlockId[iNdEx])
			i = encodeVarintRpc(dAtA, i, uint64(len(m.BlockId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetBlockMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockMeta != nil {
		l = m.BlockMeta.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *SetBlockMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DelBlockMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRpc(uint64(m.Type))
	}
	return n
}

func (m *DelBlockMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	return n
}

func (m *GetBlockMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRpc(uint64(m.Type))
	}
	return n
}

func (m *BlockMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRpc(uint64(m.Type))
	}
	if m.Source != 0 {
		n += 1 + sovRpc(uint64(m.Source))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *GetBlockMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockMeta != nil {
		l = m.BlockMeta.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ExistsBlockMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRpc(uint64(m.Type))
	}
	return n
}

func (m *ExistsBlockMetaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	return n
}

func (m *ListBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockId) > 0 {
		for _, s := range m.BlockId {
			l = len(s)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetBlockMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBlockMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBlockMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockMeta == nil {
				m.BlockMeta = &BlockMeta{}
			}
			if err := m.BlockMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBlockMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBlockMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBlockMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelBlockMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelBlockMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelBlockMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelBlockMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelBlockMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelBlockMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= Source(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockMeta == nil {
				m.BlockMeta = &BlockMeta{}
			}
			if err := m.BlockMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExistsBlockMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistsBlockMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistsBlockMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExistsBlockMetaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExistsBlockMetaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExistsBlockMetaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = append(m.BlockId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
