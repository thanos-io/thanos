// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: status/statuspb/rpc.proto

package statuspb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	storepb "github.com/thanos-io/thanos/pkg/store/storepb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TSDBStatisticsRequest struct {
	Tenant                  string                          `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Limit                   int32                           `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	PartialResponseStrategy storepb.PartialResponseStrategy `protobuf:"varint,3,opt,name=partial_response_strategy,json=partialResponseStrategy,proto3,enum=thanos.PartialResponseStrategy" json:"partial_response_strategy,omitempty"`
}

func (m *TSDBStatisticsRequest) Reset()         { *m = TSDBStatisticsRequest{} }
func (m *TSDBStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*TSDBStatisticsRequest) ProtoMessage()    {}
func (*TSDBStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d59a2444f79de84b, []int{0}
}
func (m *TSDBStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSDBStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSDBStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSDBStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSDBStatisticsRequest.Merge(m, src)
}
func (m *TSDBStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *TSDBStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TSDBStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TSDBStatisticsRequest proto.InternalMessageInfo

type TSDBStatisticsResponse struct {
	// Types that are valid to be assigned to Result:
	//	*TSDBStatisticsResponse_Statistics
	//	*TSDBStatisticsResponse_Warning
	Result isTSDBStatisticsResponse_Result `protobuf_oneof:"result"`
}

func (m *TSDBStatisticsResponse) Reset()         { *m = TSDBStatisticsResponse{} }
func (m *TSDBStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*TSDBStatisticsResponse) ProtoMessage()    {}
func (*TSDBStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d59a2444f79de84b, []int{1}
}
func (m *TSDBStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSDBStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSDBStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSDBStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSDBStatisticsResponse.Merge(m, src)
}
func (m *TSDBStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *TSDBStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TSDBStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TSDBStatisticsResponse proto.InternalMessageInfo

type isTSDBStatisticsResponse_Result interface {
	isTSDBStatisticsResponse_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TSDBStatisticsResponse_Statistics struct {
	Statistics *TSDBStatistics `protobuf:"bytes,1,opt,name=statistics,proto3,oneof" json:"statistics,omitempty"`
}
type TSDBStatisticsResponse_Warning struct {
	Warning string `protobuf:"bytes,2,opt,name=warning,proto3,oneof" json:"warning,omitempty"`
}

func (*TSDBStatisticsResponse_Statistics) isTSDBStatisticsResponse_Result() {}
func (*TSDBStatisticsResponse_Warning) isTSDBStatisticsResponse_Result()    {}

func (m *TSDBStatisticsResponse) GetResult() isTSDBStatisticsResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *TSDBStatisticsResponse) GetStatistics() *TSDBStatistics {
	if x, ok := m.GetResult().(*TSDBStatisticsResponse_Statistics); ok {
		return x.Statistics
	}
	return nil
}

func (m *TSDBStatisticsResponse) GetWarning() string {
	if x, ok := m.GetResult().(*TSDBStatisticsResponse_Warning); ok {
		return x.Warning
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TSDBStatisticsResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TSDBStatisticsResponse_Statistics)(nil),
		(*TSDBStatisticsResponse_Warning)(nil),
	}
}

type TSDBStatistics struct {
	Statistics map[string]*TSDBStatisticsEntry `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TSDBStatistics) Reset()         { *m = TSDBStatistics{} }
func (m *TSDBStatistics) String() string { return proto.CompactTextString(m) }
func (*TSDBStatistics) ProtoMessage()    {}
func (*TSDBStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_d59a2444f79de84b, []int{2}
}
func (m *TSDBStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSDBStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSDBStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSDBStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSDBStatistics.Merge(m, src)
}
func (m *TSDBStatistics) XXX_Size() int {
	return m.Size()
}
func (m *TSDBStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_TSDBStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_TSDBStatistics proto.InternalMessageInfo

type TSDBStatisticsEntry struct {
	// Statistics from the TSDB head.
	HeadStatistics              HeadStatistics `protobuf:"bytes,1,opt,name=head_statistics,json=headStatistics,proto3" json:"headStats"`
	SeriesCountByMetricName     []Statistic    `protobuf:"bytes,2,rep,name=series_count_by_metric_name,json=seriesCountByMetricName,proto3" json:"seriesCountByMetricName"`
	LabelValueCountByLabelName  []Statistic    `protobuf:"bytes,3,rep,name=label_value_count_by_label_name,json=labelValueCountByLabelName,proto3" json:"labelValueCountByLabelName"`
	MemoryInBytesByLabelName    []Statistic    `protobuf:"bytes,4,rep,name=memory_in_bytes_by_label_name,json=memoryInBytesByLabelName,proto3" json:"memoryInBytesByLabelName"`
	SeriesCountByLabelValuePair []Statistic    `protobuf:"bytes,5,rep,name=series_count_by_label_value_pair,json=seriesCountByLabelValuePair,proto3" json:"seriesCountByLabelValuePair"`
}

func (m *TSDBStatisticsEntry) Reset()         { *m = TSDBStatisticsEntry{} }
func (m *TSDBStatisticsEntry) String() string { return proto.CompactTextString(m) }
func (*TSDBStatisticsEntry) ProtoMessage()    {}
func (*TSDBStatisticsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d59a2444f79de84b, []int{3}
}
func (m *TSDBStatisticsEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSDBStatisticsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSDBStatisticsEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSDBStatisticsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSDBStatisticsEntry.Merge(m, src)
}
func (m *TSDBStatisticsEntry) XXX_Size() int {
	return m.Size()
}
func (m *TSDBStatisticsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_TSDBStatisticsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_TSDBStatisticsEntry proto.InternalMessageInfo

type HeadStatistics struct {
	// Total number of series.
	NumSeries uint64 `protobuf:"varint,1,opt,name=num_series,json=numSeries,proto3" json:"numSeries"`
	// Total number of label pairs.
	NumLabelPairs int64 `protobuf:"varint,2,opt,name=num_label_pairs,json=numLabelPairs,proto3" json:"numLabelPairs"`
	// Total number of chunks (not implemented yet).
	ChunkCount int64 `protobuf:"varint,3,opt,name=chunk_count,json=chunkCount,proto3" json:"chunkCount"`
	// Minimum timestamp.
	MinTime int64 `protobuf:"varint,4,opt,name=min_time,json=minTime,proto3" json:"minTime"`
	// Maximum timestamp.
	MaxTime int64 `protobuf:"varint,5,opt,name=max_time,json=maxTime,proto3" json:"maxTime"`
}

func (m *HeadStatistics) Reset()         { *m = HeadStatistics{} }
func (m *HeadStatistics) String() string { return proto.CompactTextString(m) }
func (*HeadStatistics) ProtoMessage()    {}
func (*HeadStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_d59a2444f79de84b, []int{4}
}
func (m *HeadStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HeadStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HeadStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HeadStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeadStatistics.Merge(m, src)
}
func (m *HeadStatistics) XXX_Size() int {
	return m.Size()
}
func (m *HeadStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_HeadStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_HeadStatistics proto.InternalMessageInfo

type Statistic struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Statistic) Reset()         { *m = Statistic{} }
func (m *Statistic) String() string { return proto.CompactTextString(m) }
func (*Statistic) ProtoMessage()    {}
func (*Statistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_d59a2444f79de84b, []int{5}
}
func (m *Statistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Statistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Statistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Statistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistic.Merge(m, src)
}
func (m *Statistic) XXX_Size() int {
	return m.Size()
}
func (m *Statistic) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistic.DiscardUnknown(m)
}

var xxx_messageInfo_Statistic proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TSDBStatisticsRequest)(nil), "thanos.TSDBStatisticsRequest")
	proto.RegisterType((*TSDBStatisticsResponse)(nil), "thanos.TSDBStatisticsResponse")
	proto.RegisterType((*TSDBStatistics)(nil), "thanos.TSDBStatistics")
	proto.RegisterMapType((map[string]*TSDBStatisticsEntry)(nil), "thanos.TSDBStatistics.StatisticsEntry")
	proto.RegisterType((*TSDBStatisticsEntry)(nil), "thanos.TSDBStatisticsEntry")
	proto.RegisterType((*HeadStatistics)(nil), "thanos.HeadStatistics")
	proto.RegisterType((*Statistic)(nil), "thanos.Statistic")
}

func init() { proto.RegisterFile("status/statuspb/rpc.proto", fileDescriptor_d59a2444f79de84b) }

var fileDescriptor_d59a2444f79de84b = []byte{
	// 733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xcd, 0x4e, 0x1b, 0x49,
	0x10, 0xf6, 0xe0, 0x1f, 0x70, 0x59, 0x98, 0xa5, 0x97, 0x05, 0x63, 0xc4, 0x8c, 0xe5, 0x95, 0x90,
	0x0f, 0x2b, 0x7b, 0xe3, 0x28, 0x12, 0xc9, 0x71, 0xf2, 0x23, 0x22, 0x91, 0x88, 0xb4, 0x51, 0x0e,
	0x70, 0x18, 0xb5, 0x4d, 0xcb, 0x6e, 0xe1, 0xe9, 0x99, 0x4c, 0xf7, 0x24, 0x4c, 0xa4, 0xbc, 0x43,
	0x9e, 0x21, 0xcf, 0x90, 0x87, 0xe0, 0x90, 0x03, 0xc7, 0x9c, 0xac, 0x04, 0x6e, 0x7e, 0x84, 0x9c,
	0xa2, 0xe9, 0x1e, 0xff, 0xc6, 0xe6, 0x02, 0xd5, 0x55, 0x5f, 0xd5, 0xf7, 0x55, 0x4d, 0x77, 0x19,
	0x76, 0x85, 0x24, 0x32, 0x14, 0x0d, 0xfd, 0xcf, 0x6f, 0x37, 0x02, 0xbf, 0x53, 0xf7, 0x03, 0x4f,
	0x7a, 0x28, 0x27, 0x7b, 0x84, 0x7b, 0xa2, 0xbc, 0x2b, 0xa4, 0x17, 0xd0, 0x86, 0xfa, 0xeb, 0xb7,
	0x1b, 0x32, 0xf2, 0xa9, 0xd0, 0x90, 0xf2, 0x56, 0xd7, 0xeb, 0x7a, 0xca, 0x6c, 0xc4, 0x96, 0xf6,
	0x56, 0xbf, 0x18, 0xf0, 0xcf, 0x69, 0xeb, 0x99, 0xdd, 0x92, 0x44, 0x32, 0x21, 0x59, 0x47, 0x60,
	0xfa, 0x2e, 0xa4, 0x42, 0xa2, 0x6d, 0xc8, 0x49, 0xca, 0x09, 0x97, 0x25, 0xa3, 0x62, 0xd4, 0xf2,
	0x38, 0x39, 0xa1, 0x2d, 0xc8, 0xf6, 0x99, 0xcb, 0x64, 0x69, 0xa5, 0x62, 0xd4, 0xb2, 0x58, 0x1f,
	0xd0, 0x39, 0xec, 0xfa, 0x24, 0x90, 0x8c, 0xf4, 0x9d, 0x80, 0x0a, 0xdf, 0xe3, 0x82, 0x3a, 0x42,
	0x06, 0x44, 0xd2, 0x6e, 0x54, 0x4a, 0x57, 0x8c, 0x5a, 0xb1, 0x69, 0xd5, 0xb5, 0xc8, 0xfa, 0x89,
	0x06, 0xe2, 0x04, 0xd7, 0x4a, 0x60, 0x78, 0xc7, 0x5f, 0x1c, 0xa8, 0x5e, 0xc1, 0xf6, 0xbc, 0x46,
	0x8d, 0x40, 0x87, 0x00, 0x62, 0xec, 0x55, 0x42, 0x0b, 0xcd, 0xed, 0x11, 0xcf, 0x6c, 0xce, 0x51,
	0x0a, 0x4f, 0x61, 0x51, 0x19, 0x56, 0x3f, 0x90, 0x80, 0x33, 0xde, 0x55, 0x8d, 0xe4, 0x8f, 0x52,
	0x78, 0xe4, 0xb0, 0xd7, 0x20, 0x17, 0x50, 0x11, 0xf6, 0x65, 0xf5, 0xab, 0x01, 0xc5, 0xd9, 0x32,
	0xe8, 0xc5, 0x1c, 0x65, 0xba, 0x56, 0x68, 0x1e, 0x2c, 0xa6, 0xac, 0x4f, 0xcc, 0xe7, 0x5c, 0x06,
	0xd1, 0xb4, 0x80, 0xf2, 0x19, 0x6c, 0xcc, 0x85, 0xd1, 0x5f, 0x90, 0xbe, 0xa4, 0x51, 0x32, 0xef,
	0xd8, 0x44, 0x0f, 0x20, 0xfb, 0x9e, 0xf4, 0x43, 0xaa, 0x34, 0x16, 0x9a, 0x7b, 0x8b, 0x79, 0x74,
	0x71, 0x8d, 0x7c, 0xb2, 0x72, 0x68, 0x54, 0xbf, 0x65, 0xe0, 0xef, 0x05, 0x10, 0x84, 0x61, 0xa3,
	0x47, 0xc9, 0x85, 0xb3, 0x7c, 0x66, 0x47, 0x94, 0x5c, 0x4c, 0xb2, 0xec, 0xcd, 0xeb, 0x81, 0x95,
	0x1a, 0x0e, 0xac, 0x7c, 0x2f, 0xf1, 0x0b, 0x5c, 0xec, 0xcd, 0x40, 0x90, 0x0f, 0x7b, 0x82, 0x06,
	0x8c, 0x0a, 0xa7, 0xe3, 0x85, 0x5c, 0x3a, 0xed, 0xc8, 0x71, 0xa9, 0x0c, 0x58, 0xc7, 0xe1, 0xc4,
	0x8d, 0x85, 0xc7, 0x03, 0xda, 0x1c, 0xd5, 0x1f, 0x27, 0xda, 0x56, 0x52, 0x7a, 0x47, 0x67, 0x3f,
	0x8d, 0x93, 0xed, 0xe8, 0x95, 0x4a, 0x7d, 0x4d, 0x5c, 0x8a, 0x97, 0x05, 0xd0, 0x47, 0xb0, 0xfa,
	0xa4, 0x4d, 0xfb, 0x8e, 0x6a, 0x78, 0x42, 0xab, 0x9d, 0x8a, 0x35, 0xbd, 0x8c, 0xb5, 0x9a, 0xb0,
	0x96, 0x15, 0xf8, 0x6d, 0x5c, 0x20, 0x21, 0x38, 0x8e, 0x1d, 0x8a, 0xf8, 0x9e, 0x18, 0x92, 0xb0,
	0xef, 0x52, 0xd7, 0x0b, 0x22, 0x87, 0x71, 0xa7, 0x1d, 0x49, 0x2a, 0xe6, 0x98, 0x33, 0xcb, 0x98,
	0x2b, 0x09, 0x73, 0x49, 0xe7, 0xbf, 0xe4, 0x76, 0x9c, 0x3d, 0xcd, 0xbb, 0x34, 0x82, 0x3e, 0x41,
	0x65, 0x7e, 0xc6, 0xd3, 0x13, 0xf0, 0x09, 0x0b, 0x4a, 0xd9, 0x65, 0xc4, 0xff, 0x26, 0xc4, 0x7b,
	0x33, 0xf3, 0x3c, 0x1e, 0xf7, 0x78, 0x42, 0x58, 0x80, 0xef, 0x0b, 0x56, 0x7f, 0x19, 0x50, 0x9c,
	0xbd, 0x18, 0xe8, 0x3f, 0x00, 0x1e, 0xba, 0x8e, 0xce, 0x52, 0x97, 0x28, 0x63, 0xaf, 0xc7, 0x17,
	0x85, 0x87, 0x6e, 0x4b, 0x39, 0xf1, 0xc4, 0x44, 0x8f, 0x61, 0x23, 0x46, 0x6b, 0xcd, 0xb1, 0x5a,
	0xa1, 0x2e, 0x74, 0xda, 0xde, 0x1c, 0x0e, 0xac, 0x75, 0x1e, 0xba, 0x8a, 0x30, 0xe6, 0x12, 0x78,
	0xf6, 0x88, 0x1a, 0x50, 0xe8, 0xf4, 0x42, 0x7e, 0xa9, 0x3b, 0x57, 0xab, 0x24, 0x6d, 0x17, 0x87,
	0x03, 0x0b, 0x94, 0x5b, 0x09, 0xc6, 0x53, 0x36, 0x3a, 0x80, 0x35, 0x97, 0x71, 0x47, 0x32, 0xf5,
	0x31, 0x62, 0x74, 0x61, 0x38, 0xb0, 0x56, 0x5d, 0xc6, 0x4f, 0x99, 0x4b, 0xf1, 0xc8, 0x50, 0x38,
	0x72, 0xa5, 0x71, 0xd9, 0x29, 0x1c, 0xb9, 0x4a, 0x70, 0xda, 0xa8, 0x3e, 0x82, 0xfc, 0xb8, 0x6f,
	0x84, 0x20, 0xa3, 0xbe, 0xb2, 0x7e, 0xa2, 0xca, 0x8e, 0x17, 0xe2, 0xe4, 0x8d, 0x66, 0x92, 0x67,
	0xd8, 0x3c, 0x87, 0x5c, 0x4b, 0xed, 0x69, 0xf4, 0xe6, 0x8f, 0x15, 0xb2, 0xbf, 0xf8, 0x19, 0x27,
	0x9b, 0xb7, 0x6c, 0x2e, 0x0b, 0xeb, 0xa5, 0xf7, 0xbf, 0x61, 0x1f, 0x5c, 0xff, 0x34, 0x53, 0xd7,
	0xb7, 0xa6, 0x71, 0x73, 0x6b, 0x1a, 0x3f, 0x6e, 0x4d, 0xe3, 0xf3, 0x9d, 0x99, 0xba, 0xb9, 0x33,
	0x53, 0xdf, 0xef, 0xcc, 0xd4, 0xd9, 0xda, 0xe8, 0x07, 0xa2, 0x9d, 0x53, 0x4b, 0xfe, 0xe1, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x12, 0x23, 0x65, 0x33, 0x3a, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusClient interface {
	// TSDBStatistics has information for all TSDBs.
	TSDBStatistics(ctx context.Context, in *TSDBStatisticsRequest, opts ...grpc.CallOption) (Status_TSDBStatisticsClient, error)
}

type statusClient struct {
	cc *grpc.ClientConn
}

func NewStatusClient(cc *grpc.ClientConn) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) TSDBStatistics(ctx context.Context, in *TSDBStatisticsRequest, opts ...grpc.CallOption) (Status_TSDBStatisticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Status_serviceDesc.Streams[0], "/thanos.Status/TSDBStatistics", opts...)
	if err != nil {
		return nil, err
	}
	x := &statusTSDBStatisticsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Status_TSDBStatisticsClient interface {
	Recv() (*TSDBStatisticsResponse, error)
	grpc.ClientStream
}

type statusTSDBStatisticsClient struct {
	grpc.ClientStream
}

func (x *statusTSDBStatisticsClient) Recv() (*TSDBStatisticsResponse, error) {
	m := new(TSDBStatisticsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatusServer is the server API for Status service.
type StatusServer interface {
	// TSDBStatistics has information for all TSDBs.
	TSDBStatistics(*TSDBStatisticsRequest, Status_TSDBStatisticsServer) error
}

// UnimplementedStatusServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServer struct {
}

func (*UnimplementedStatusServer) TSDBStatistics(req *TSDBStatisticsRequest, srv Status_TSDBStatisticsServer) error {
	return status.Errorf(codes.Unimplemented, "method TSDBStatistics not implemented")
}

func RegisterStatusServer(s *grpc.Server, srv StatusServer) {
	s.RegisterService(&_Status_serviceDesc, srv)
}

func _Status_TSDBStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TSDBStatisticsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatusServer).TSDBStatistics(m, &statusTSDBStatisticsServer{stream})
}

type Status_TSDBStatisticsServer interface {
	Send(*TSDBStatisticsResponse) error
	grpc.ServerStream
}

type statusTSDBStatisticsServer struct {
	grpc.ServerStream
}

func (x *statusTSDBStatisticsServer) Send(m *TSDBStatisticsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Status_serviceDesc = grpc.ServiceDesc{
	ServiceName: "thanos.Status",
	HandlerType: (*StatusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TSDBStatistics",
			Handler:       _Status_TSDBStatistics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "status/statuspb/rpc.proto",
}

func (m *TSDBStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSDBStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSDBStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartialResponseStrategy != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.PartialResponseStrategy))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TSDBStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSDBStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSDBStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TSDBStatisticsResponse_Statistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSDBStatisticsResponse_Statistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Statistics != nil {
		{
			size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TSDBStatisticsResponse_Warning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSDBStatisticsResponse_Warning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Warning)
	copy(dAtA[i:], m.Warning)
	i = encodeVarintRpc(dAtA, i, uint64(len(m.Warning)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *TSDBStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSDBStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSDBStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for k := range m.Statistics {
			v := m.Statistics[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRpc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRpc(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRpc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TSDBStatisticsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSDBStatisticsEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSDBStatisticsEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeriesCountByLabelValuePair) > 0 {
		for iNdEx := len(m.SeriesCountByLabelValuePair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeriesCountByLabelValuePair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MemoryInBytesByLabelName) > 0 {
		for iNdEx := len(m.MemoryInBytesByLabelName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MemoryInBytesByLabelName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LabelValueCountByLabelName) > 0 {
		for iNdEx := len(m.LabelValueCountByLabelName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LabelValueCountByLabelName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SeriesCountByMetricName) > 0 {
		for iNdEx := len(m.SeriesCountByMetricName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SeriesCountByMetricName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRpc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.HeadStatistics.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRpc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *HeadStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeadStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HeadStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxTime != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.MaxTime))
		i--
		dAtA[i] = 0x28
	}
	if m.MinTime != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.MinTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ChunkCount != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.ChunkCount))
		i--
		dAtA[i] = 0x18
	}
	if m.NumLabelPairs != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.NumLabelPairs))
		i--
		dAtA[i] = 0x10
	}
	if m.NumSeries != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.NumSeries))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Statistic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Statistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintRpc(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TSDBStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovRpc(uint64(m.Limit))
	}
	if m.PartialResponseStrategy != 0 {
		n += 1 + sovRpc(uint64(m.PartialResponseStrategy))
	}
	return n
}

func (m *TSDBStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *TSDBStatisticsResponse_Statistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Statistics != nil {
		l = m.Statistics.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}
func (m *TSDBStatisticsResponse_Warning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Warning)
	n += 1 + l + sovRpc(uint64(l))
	return n
}
func (m *TSDBStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for k, v := range m.Statistics {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRpc(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRpc(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRpc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TSDBStatisticsEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HeadStatistics.Size()
	n += 1 + l + sovRpc(uint64(l))
	if len(m.SeriesCountByMetricName) > 0 {
		for _, e := range m.SeriesCountByMetricName {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	if len(m.LabelValueCountByLabelName) > 0 {
		for _, e := range m.LabelValueCountByLabelName {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	if len(m.MemoryInBytesByLabelName) > 0 {
		for _, e := range m.MemoryInBytesByLabelName {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	if len(m.SeriesCountByLabelValuePair) > 0 {
		for _, e := range m.SeriesCountByLabelValuePair {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *HeadStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumSeries != 0 {
		n += 1 + sovRpc(uint64(m.NumSeries))
	}
	if m.NumLabelPairs != 0 {
		n += 1 + sovRpc(uint64(m.NumLabelPairs))
	}
	if m.ChunkCount != 0 {
		n += 1 + sovRpc(uint64(m.ChunkCount))
	}
	if m.MinTime != 0 {
		n += 1 + sovRpc(uint64(m.MinTime))
	}
	if m.MaxTime != 0 {
		n += 1 + sovRpc(uint64(m.MaxTime))
	}
	return n
}

func (m *Statistic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovRpc(uint64(m.Value))
	}
	return n
}

func sovRpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TSDBStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSDBStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSDBStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialResponseStrategy", wireType)
			}
			m.PartialResponseStrategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartialResponseStrategy |= storepb.PartialResponseStrategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSDBStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSDBStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSDBStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TSDBStatistics{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &TSDBStatisticsResponse_Statistics{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Warning", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = &TSDBStatisticsResponse_Warning{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSDBStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSDBStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSDBStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistics == nil {
				m.Statistics = make(map[string]*TSDBStatisticsEntry)
			}
			var mapkey string
			var mapvalue *TSDBStatisticsEntry
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRpc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRpc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TSDBStatisticsEntry{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Statistics[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TSDBStatisticsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSDBStatisticsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSDBStatisticsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HeadStatistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesCountByMetricName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeriesCountByMetricName = append(m.SeriesCountByMetricName, Statistic{})
			if err := m.SeriesCountByMetricName[len(m.SeriesCountByMetricName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelValueCountByLabelName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LabelValueCountByLabelName = append(m.LabelValueCountByLabelName, Statistic{})
			if err := m.LabelValueCountByLabelName[len(m.LabelValueCountByLabelName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryInBytesByLabelName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemoryInBytesByLabelName = append(m.MemoryInBytesByLabelName, Statistic{})
			if err := m.MemoryInBytesByLabelName[len(m.MemoryInBytesByLabelName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesCountByLabelValuePair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeriesCountByLabelValuePair = append(m.SeriesCountByLabelValuePair, Statistic{})
			if err := m.SeriesCountByLabelValuePair[len(m.SeriesCountByLabelValuePair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeadStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeadStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeadStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSeries", wireType)
			}
			m.NumSeries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSeries |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLabelPairs", wireType)
			}
			m.NumLabelPairs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLabelPairs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkCount", wireType)
			}
			m.ChunkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTime", wireType)
			}
			m.MinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTime", wireType)
			}
			m.MaxTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Statistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Statistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Statistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpc = fmt.Errorf("proto: unexpected end of group")
)
