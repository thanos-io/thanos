// Copyright (c) The Thanos Authors.
// Licensed under the Apache License 2.0.

syntax = "proto3";
package thanos;

option go_package = "querypb";

import "gogoproto/gogo.proto";
import "store/storepb/types.proto";
import "store/storepb/rpc.proto";
import "store/storepb/prompb/types.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// Do not generate XXX fields to reduce memory footprint and opening a door
// for zero-copy casts to/from prometheus data types.
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

enum EngineType {
  default    = 0;
  prometheus = 1;
  thanos     = 2;
}

message QueryStats {
  int64 samples_total = 1;
  int64 peak_samples = 2;
}

message QueryRequest {
  string query = 1;
  queryPlan queryPlan = 14;

  int64 time_seconds = 2;
  int64 timeout_seconds = 3;
  int64 max_resolution_seconds = 4;

  repeated string replica_labels = 5;

  repeated StoreMatchers storeMatchers = 6 [(gogoproto.nullable) = false];

  bool enableDedup = 7;
  bool enablePartialResponse = 8;
  bool skipChunks = 10;

  ShardInfo shard_info = 11;

  int64 lookback_delta_seconds = 12;
  EngineType engine = 13;

  reserved 9;
}

message StoreMatchers {
  repeated LabelMatcher labelMatchers = 1 [(gogoproto.nullable) = false];
}

message QueryResponse {
  oneof result {
    /// warnings are additional messages coming from the PromQL engine.
    string warnings = 1;

    /// timeseries is one series from the result of the executed query.
    prometheus_copy.TimeSeries timeseries = 2;

    // performance stats
    QueryStats stats = 3;
  }
}

message queryPlan {
  oneof encoding {
    bytes json = 1;
  }
}

message QueryRangeRequest {
  string query = 1;
  queryPlan queryPlan = 16;

  int64 start_time_seconds = 2;
  int64 end_time_seconds = 3;
  int64 interval_seconds = 4;

  int64 timeout_seconds = 5;
  int64 max_resolution_seconds = 6;

  repeated string replica_labels = 7;

  repeated StoreMatchers storeMatchers = 8 [(gogoproto.nullable) = false];

  bool enableDedup = 9;
  bool enablePartialResponse = 10;
  bool skipChunks = 12;

  ShardInfo shard_info = 13;
  int64 lookback_delta_seconds = 14;
  EngineType engine = 15;

  reserved 11;
}

message QueryRangeResponse {
  oneof result {
    /// warnings are additional messages coming from the PromQL engine.
    string warnings = 1;

    /// timeseries is one series from the result of the executed query.
    prometheus_copy.TimeSeries timeseries = 2;

    // performance stats
    QueryStats stats = 3;
  }
}

service Query {
  rpc Query(QueryRequest) returns (stream QueryResponse);

  rpc QueryRange(QueryRangeRequest) returns (stream QueryRangeResponse);
}
