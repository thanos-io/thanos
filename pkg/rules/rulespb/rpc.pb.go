// Copyright (c) The Thanos Authors.
// Licensed under the Apache License 2.0.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.0
// source: rules/rulespb/rpc.proto

package rulespb

import (
	reflect "reflect"
	sync "sync"

	labelpb "github.com/thanos-io/thanos/pkg/store/labelpb"
	storepb "github.com/thanos-io/thanos/pkg/store/storepb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / AlertState represents state of the alert. Has to match 1:1 Prometheus AlertState:
//
// StateInactive is the state of an alert that is neither firing nor pending.
// StateInactive AlertState = iota
// StatePending is the state of an alert that has been active for less than
// the configured threshold duration.
// StatePending
// StateFiring is the state of an alert that has been active for longer than
// the configured threshold duration.
// StateFiring
type AlertState int32

const (
	AlertState_INACTIVE AlertState = 0
	AlertState_PENDING  AlertState = 1
	AlertState_FIRING   AlertState = 2
)

// Enum value maps for AlertState.
var (
	AlertState_name = map[int32]string{
		0: "INACTIVE",
		1: "PENDING",
		2: "FIRING",
	}
	AlertState_value = map[string]int32{
		"INACTIVE": 0,
		"PENDING":  1,
		"FIRING":   2,
	}
)

func (x AlertState) Enum() *AlertState {
	p := new(AlertState)
	*p = x
	return p
}

func (x AlertState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertState) Descriptor() protoreflect.EnumDescriptor {
	return file_rules_rulespb_rpc_proto_enumTypes[0].Descriptor()
}

func (AlertState) Type() protoreflect.EnumType {
	return &file_rules_rulespb_rpc_proto_enumTypes[0]
}

func (x AlertState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertState.Descriptor instead.
func (AlertState) EnumDescriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{0}
}

type RulesRequest_Type int32

const (
	RulesRequest_ALL RulesRequest_Type = 0
	// / This will make sure strings.ToLower(.String()) will match 'alert' and 'record' values for
	// / Prometheus HTTP API.
	// / NOTE: The implementation has to return empty rule groups as well.
	RulesRequest_ALERT  RulesRequest_Type = 1
	RulesRequest_RECORD RulesRequest_Type = 2
)

// Enum value maps for RulesRequest_Type.
var (
	RulesRequest_Type_name = map[int32]string{
		0: "ALL",
		1: "ALERT",
		2: "RECORD",
	}
	RulesRequest_Type_value = map[string]int32{
		"ALL":    0,
		"ALERT":  1,
		"RECORD": 2,
	}
)

func (x RulesRequest_Type) Enum() *RulesRequest_Type {
	p := new(RulesRequest_Type)
	*p = x
	return p
}

func (x RulesRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RulesRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rules_rulespb_rpc_proto_enumTypes[1].Descriptor()
}

func (RulesRequest_Type) Type() protoreflect.EnumType {
	return &file_rules_rulespb_rpc_proto_enumTypes[1]
}

func (x RulesRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RulesRequest_Type.Descriptor instead.
func (RulesRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{0, 0}
}

type RulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    RulesRequest_Type               `protobuf:"varint,1,opt,name=type,proto3,enum=thanos.RulesRequest_Type" json:"type,omitempty"`
	PartialResponseStrategy storepb.PartialResponseStrategy `protobuf:"varint,2,opt,name=partial_response_strategy,json=partialResponseStrategy,proto3,enum=thanos.PartialResponseStrategy" json:"partial_response_strategy,omitempty"`
	MatcherString           []string                        `protobuf:"bytes,3,rep,name=matcher_string,json=matcherString,proto3" json:"matcher_string,omitempty"`
	RuleName                []string                        `protobuf:"bytes,4,rep,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	RuleGroup               []string                        `protobuf:"bytes,5,rep,name=rule_group,json=ruleGroup,proto3" json:"rule_group,omitempty"`
	File                    []string                        `protobuf:"bytes,6,rep,name=file,proto3" json:"file,omitempty"`
}

func (x *RulesRequest) Reset() {
	*x = RulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rules_rulespb_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulesRequest) ProtoMessage() {}

func (x *RulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rules_rulespb_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulesRequest.ProtoReflect.Descriptor instead.
func (*RulesRequest) Descriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *RulesRequest) GetType() RulesRequest_Type {
	if x != nil {
		return x.Type
	}
	return RulesRequest_ALL
}

func (x *RulesRequest) GetPartialResponseStrategy() storepb.PartialResponseStrategy {
	if x != nil {
		return x.PartialResponseStrategy
	}
	return storepb.PartialResponseStrategy(0)
}

func (x *RulesRequest) GetMatcherString() []string {
	if x != nil {
		return x.MatcherString
	}
	return nil
}

func (x *RulesRequest) GetRuleName() []string {
	if x != nil {
		return x.RuleName
	}
	return nil
}

func (x *RulesRequest) GetRuleGroup() []string {
	if x != nil {
		return x.RuleGroup
	}
	return nil
}

func (x *RulesRequest) GetFile() []string {
	if x != nil {
		return x.File
	}
	return nil
}

type RulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*RulesResponse_Group
	//	*RulesResponse_Warning
	Result isRulesResponse_Result `protobuf_oneof:"result"`
}

func (x *RulesResponse) Reset() {
	*x = RulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rules_rulespb_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RulesResponse) ProtoMessage() {}

func (x *RulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rules_rulespb_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RulesResponse.ProtoReflect.Descriptor instead.
func (*RulesResponse) Descriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{1}
}

func (m *RulesResponse) GetResult() isRulesResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *RulesResponse) GetGroup() *RuleGroup {
	if x, ok := x.GetResult().(*RulesResponse_Group); ok {
		return x.Group
	}
	return nil
}

func (x *RulesResponse) GetWarning() string {
	if x, ok := x.GetResult().(*RulesResponse_Warning); ok {
		return x.Warning
	}
	return ""
}

type isRulesResponse_Result interface {
	isRulesResponse_Result()
}

type RulesResponse_Group struct {
	// / group for rule groups. It is up to server implementation to decide how many of those to put here within single frame.
	Group *RuleGroup `protobuf:"bytes,1,opt,name=group,proto3,oneof"`
}

type RulesResponse_Warning struct {
	// / warning is considered an information piece in place of series for warning purposes.
	// / It is used to warn rule API users about suspicious cases or partial response (if enabled).
	Warning string `protobuf:"bytes,2,opt,name=warning,proto3,oneof"`
}

func (*RulesResponse_Group) isRulesResponse_Result() {}

func (*RulesResponse_Warning) isRulesResponse_Result() {}

// / RuleGroups is set of rule groups.
// / This and below APIs are meant to be used for unmarshaling and marshsaling rules from/to Prometheus API.
// / That's why json tag has to be customized and matching https://github.com/prometheus/prometheus/blob/c530b4b456cc5f9ec249f771dff187eb7715dc9b/web/api/v1/api.go#L955
// / NOTE: See rules_custom_test.go for compatibility tests.
// /
// / For rule parsing from YAML configuration other struct is used: https://github.com/prometheus/prometheus/blob/20b1f596f6fb16107ef0c244d240b0ad6da36829/pkg/rulefmt/rulefmt.go#L105
type RuleGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"groups"
	Groups []*RuleGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups"`
}

func (x *RuleGroups) Reset() {
	*x = RuleGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rules_rulespb_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleGroups) ProtoMessage() {}

func (x *RuleGroups) ProtoReflect() protoreflect.Message {
	mi := &file_rules_rulespb_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleGroups.ProtoReflect.Descriptor instead.
func (*RuleGroups) Descriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *RuleGroups) GetGroups() []*RuleGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// / RuleGroup has info for rules which are part of a group.
type RuleGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// @gotags: json:"file"
	File string `protobuf:"bytes,2,opt,name=file,proto3" json:"file"`
	// @gotags: json:"rules"
	Rules []*Rule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules"`
	// @gotags: json:"interval"
	Interval float64 `protobuf:"fixed64,4,opt,name=interval,proto3" json:"interval"`
	// @gotags: json:"evaluationTime"
	EvaluationDurationSeconds float64 `protobuf:"fixed64,5,opt,name=evaluation_duration_seconds,json=evaluationDurationSeconds,proto3" json:"evaluationTime"` // TODO: Is it really second?
	// @gotags: json:"lastEvaluation"
	LastEvaluation *Timestamp `protobuf:"bytes,6,opt,name=last_evaluation,json=lastEvaluation,proto3" json:"lastEvaluation"`
	// @gotags: json:"limit"
	Limit int64 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit"`
	// Thanos specific.
	// @gotags: json:"partialResponseStrategy"
	PartialResponseStrategy storepb.PartialResponseStrategy `protobuf:"varint,8,opt,name=PartialResponseStrategy,proto3,enum=thanos.PartialResponseStrategy" json:"partialResponseStrategy"`
}

func (x *RuleGroup) Reset() {
	*x = RuleGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rules_rulespb_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleGroup) ProtoMessage() {}

func (x *RuleGroup) ProtoReflect() protoreflect.Message {
	mi := &file_rules_rulespb_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleGroup.ProtoReflect.Descriptor instead.
func (*RuleGroup) Descriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *RuleGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleGroup) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *RuleGroup) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RuleGroup) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *RuleGroup) GetEvaluationDurationSeconds() float64 {
	if x != nil {
		return x.EvaluationDurationSeconds
	}
	return 0
}

func (x *RuleGroup) GetLastEvaluation() *Timestamp {
	if x != nil {
		return x.LastEvaluation
	}
	return nil
}

func (x *RuleGroup) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RuleGroup) GetPartialResponseStrategy() storepb.PartialResponseStrategy {
	if x != nil {
		return x.PartialResponseStrategy
	}
	return storepb.PartialResponseStrategy(0)
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*Rule_Recording
	//	*Rule_Alert
	Result isRule_Result `protobuf_oneof:"result"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rules_rulespb_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_rules_rulespb_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{4}
}

func (m *Rule) GetResult() isRule_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Rule) GetRecording() *RecordingRule {
	if x, ok := x.GetResult().(*Rule_Recording); ok {
		return x.Recording
	}
	return nil
}

func (x *Rule) GetAlert() *Alert {
	if x, ok := x.GetResult().(*Rule_Alert); ok {
		return x.Alert
	}
	return nil
}

type isRule_Result interface {
	isRule_Result()
}

type Rule_Recording struct {
	Recording *RecordingRule `protobuf:"bytes,1,opt,name=recording,proto3,oneof"`
}

type Rule_Alert struct {
	Alert *Alert `protobuf:"bytes,2,opt,name=alert,proto3,oneof"`
}

func (*Rule_Recording) isRule_Result() {}

func (*Rule_Alert) isRule_Result() {}

type AlertInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"labels"
	Labels *labelpb.LabelSet `protobuf:"bytes,1,opt,name=labels,proto3" json:"labels"`
	// @gotags: json:"annotations"
	Annotations *labelpb.LabelSet `protobuf:"bytes,2,opt,name=annotations,proto3" json:"annotations"`
	// @gotags: json:"state"
	State AlertState `protobuf:"varint,3,opt,name=state,proto3,enum=thanos.AlertState" json:"state"`
	// @gotags: json:"activeAt,omitempty"
	ActiveAt *Timestamp `protobuf:"bytes,4,opt,name=active_at,json=activeAt,proto3" json:"activeAt,omitempty"`
	// @gotags: json:"value"
	Value string `protobuf:"bytes,5,opt,name=value,proto3" json:"value"`
	// Thanos specific. Used mainly for alert API purposes.
	// @gotags: json:"partialResponseStrategy"
	PartialResponseStrategy storepb.PartialResponseStrategy `protobuf:"varint,6,opt,name=PartialResponseStrategy,proto3,enum=thanos.PartialResponseStrategy" json:"partialResponseStrategy"`
}

func (x *AlertInstance) Reset() {
	*x = AlertInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rules_rulespb_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertInstance) ProtoMessage() {}

func (x *AlertInstance) ProtoReflect() protoreflect.Message {
	mi := &file_rules_rulespb_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertInstance.ProtoReflect.Descriptor instead.
func (*AlertInstance) Descriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *AlertInstance) GetLabels() *labelpb.LabelSet {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AlertInstance) GetAnnotations() *labelpb.LabelSet {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *AlertInstance) GetState() AlertState {
	if x != nil {
		return x.State
	}
	return AlertState_INACTIVE
}

func (x *AlertInstance) GetActiveAt() *Timestamp {
	if x != nil {
		return x.ActiveAt
	}
	return nil
}

func (x *AlertInstance) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AlertInstance) GetPartialResponseStrategy() storepb.PartialResponseStrategy {
	if x != nil {
		return x.PartialResponseStrategy
	}
	return storepb.PartialResponseStrategy(0)
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / state returns the maximum state of alert instances for this rule.
	// @gotags: json:"state"
	State AlertState `protobuf:"varint,1,opt,name=state,proto3,enum=thanos.AlertState" json:"state"`
	// @gotags: json:"name"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// @gotags: json:"query"
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query"`
	// @gotags: json:"duration"
	DurationSeconds float64 `protobuf:"fixed64,4,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration"`
	// @gotags: json:"labels"
	Labels *labelpb.LabelSet `protobuf:"bytes,5,opt,name=labels,proto3" json:"labels"`
	// @gotags: json:"annotations"
	Annotations *labelpb.LabelSet `protobuf:"bytes,6,opt,name=annotations,proto3" json:"annotations"`
	// @gotags: json:"alerts"
	Alerts []*AlertInstance `protobuf:"bytes,7,rep,name=alerts,proto3" json:"alerts"`
	// @gotags: json:"health"
	Health string `protobuf:"bytes,8,opt,name=health,proto3" json:"health"`
	// @gotags: json:"lastError,omitempty"
	LastError string `protobuf:"bytes,9,opt,name=last_error,json=lastError,proto3" json:"lastError,omitempty"`
	// @gotags: json:"evaluationTime"
	EvaluationDurationSeconds float64 `protobuf:"fixed64,10,opt,name=evaluation_duration_seconds,json=evaluationDurationSeconds,proto3" json:"evaluationTime"`
	// @gotags: json:"lastEvaluation,omitempty"
	LastEvaluation *Timestamp `protobuf:"bytes,11,opt,name=last_evaluation,json=lastEvaluation,proto3" json:"lastEvaluation,omitempty"`
	// @gotags: json:"keepFiringFor"
	KeepFiringForSeconds float64 `protobuf:"fixed64,12,opt,name=keep_firing_for_seconds,json=keepFiringForSeconds,proto3" json:"keepFiringFor"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rules_rulespb_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_rules_rulespb_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *Alert) GetState() AlertState {
	if x != nil {
		return x.State
	}
	return AlertState_INACTIVE
}

func (x *Alert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Alert) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Alert) GetDurationSeconds() float64 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *Alert) GetLabels() *labelpb.LabelSet {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Alert) GetAnnotations() *labelpb.LabelSet {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Alert) GetAlerts() []*AlertInstance {
	if x != nil {
		return x.Alerts
	}
	return nil
}

func (x *Alert) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *Alert) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *Alert) GetEvaluationDurationSeconds() float64 {
	if x != nil {
		return x.EvaluationDurationSeconds
	}
	return 0
}

func (x *Alert) GetLastEvaluation() *Timestamp {
	if x != nil {
		return x.LastEvaluation
	}
	return nil
}

func (x *Alert) GetKeepFiringForSeconds() float64 {
	if x != nil {
		return x.KeepFiringForSeconds
	}
	return 0
}

type RecordingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"name"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	// @gotags: json:"query"
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query"`
	// @gotags: json:"labels"
	Labels *labelpb.LabelSet `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels"`
	// @gotags: json:"health"
	Health string `protobuf:"bytes,4,opt,name=health,proto3" json:"health"`
	// @gotags: json:"lastError,omitempty"
	LastError string `protobuf:"bytes,5,opt,name=last_error,json=lastError,proto3" json:"lastError,omitempty"`
	// @gotags: json:"evaluationTime"
	EvaluationDurationSeconds float64 `protobuf:"fixed64,6,opt,name=evaluation_duration_seconds,json=evaluationDurationSeconds,proto3" json:"evaluationTime"`
	// @gotags: json:"lastEvaluation"
	LastEvaluation *Timestamp `protobuf:"bytes,7,opt,name=last_evaluation,json=lastEvaluation,proto3" json:"lastEvaluation"`
}

func (x *RecordingRule) Reset() {
	*x = RecordingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rules_rulespb_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingRule) ProtoMessage() {}

func (x *RecordingRule) ProtoReflect() protoreflect.Message {
	mi := &file_rules_rulespb_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingRule.ProtoReflect.Descriptor instead.
func (*RecordingRule) Descriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *RecordingRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecordingRule) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RecordingRule) GetLabels() *labelpb.LabelSet {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RecordingRule) GetHealth() string {
	if x != nil {
		return x.Health
	}
	return ""
}

func (x *RecordingRule) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *RecordingRule) GetEvaluationDurationSeconds() float64 {
	if x != nil {
		return x.EvaluationDurationSeconds
	}
	return 0
}

func (x *RecordingRule) GetLastEvaluation() *Timestamp {
	if x != nil {
		return x.LastEvaluation
	}
	return nil
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rules_rulespb_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_rules_rulespb_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_rules_rulespb_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

var File_rules_rulespb_rpc_proto protoreflect.FileDescriptor

var file_rules_rulespb_rpc_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x70, 0x62, 0x2f,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x68, 0x61, 0x6e, 0x6f,
	0x73, 0x1a, 0x19, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x70, 0x62,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x62, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x68, 0x61,
	0x6e, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x17, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x26, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x10, 0x02, 0x22, 0x60, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1a, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x37, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xe0,
	0x02, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x22, 0x6e, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x25, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x59, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xfd, 0x03, 0x0a,
	0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x32, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x66, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x46, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x96, 0x02, 0x0a,
	0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f,
	0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x2a, 0x33, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x32, 0x3f, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x74, 0x68, 0x61, 0x6e,
	0x6f, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2d, 0x69, 0x6f,
	0x2f, 0x74, 0x68, 0x61, 0x6e, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_rules_rulespb_rpc_proto_rawDescOnce sync.Once
	file_rules_rulespb_rpc_proto_rawDescData = file_rules_rulespb_rpc_proto_rawDesc
)

func file_rules_rulespb_rpc_proto_rawDescGZIP() []byte {
	file_rules_rulespb_rpc_proto_rawDescOnce.Do(func() {
		file_rules_rulespb_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rules_rulespb_rpc_proto_rawDescData)
	})
	return file_rules_rulespb_rpc_proto_rawDescData
}

var file_rules_rulespb_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rules_rulespb_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rules_rulespb_rpc_proto_goTypes = []any{
	(AlertState)(0),                      // 0: thanos.AlertState
	(RulesRequest_Type)(0),               // 1: thanos.RulesRequest.Type
	(*RulesRequest)(nil),                 // 2: thanos.RulesRequest
	(*RulesResponse)(nil),                // 3: thanos.RulesResponse
	(*RuleGroups)(nil),                   // 4: thanos.RuleGroups
	(*RuleGroup)(nil),                    // 5: thanos.RuleGroup
	(*Rule)(nil),                         // 6: thanos.Rule
	(*AlertInstance)(nil),                // 7: thanos.AlertInstance
	(*Alert)(nil),                        // 8: thanos.Alert
	(*RecordingRule)(nil),                // 9: thanos.RecordingRule
	(*Timestamp)(nil),                    // 10: thanos.Timestamp
	(storepb.PartialResponseStrategy)(0), // 11: thanos.PartialResponseStrategy
	(*labelpb.LabelSet)(nil),             // 12: thanos.LabelSet
}
var file_rules_rulespb_rpc_proto_depIdxs = []int32{
	1,  // 0: thanos.RulesRequest.type:type_name -> thanos.RulesRequest.Type
	11, // 1: thanos.RulesRequest.partial_response_strategy:type_name -> thanos.PartialResponseStrategy
	5,  // 2: thanos.RulesResponse.group:type_name -> thanos.RuleGroup
	5,  // 3: thanos.RuleGroups.groups:type_name -> thanos.RuleGroup
	6,  // 4: thanos.RuleGroup.rules:type_name -> thanos.Rule
	10, // 5: thanos.RuleGroup.last_evaluation:type_name -> thanos.Timestamp
	11, // 6: thanos.RuleGroup.PartialResponseStrategy:type_name -> thanos.PartialResponseStrategy
	9,  // 7: thanos.Rule.recording:type_name -> thanos.RecordingRule
	8,  // 8: thanos.Rule.alert:type_name -> thanos.Alert
	12, // 9: thanos.AlertInstance.labels:type_name -> thanos.LabelSet
	12, // 10: thanos.AlertInstance.annotations:type_name -> thanos.LabelSet
	0,  // 11: thanos.AlertInstance.state:type_name -> thanos.AlertState
	10, // 12: thanos.AlertInstance.active_at:type_name -> thanos.Timestamp
	11, // 13: thanos.AlertInstance.PartialResponseStrategy:type_name -> thanos.PartialResponseStrategy
	0,  // 14: thanos.Alert.state:type_name -> thanos.AlertState
	12, // 15: thanos.Alert.labels:type_name -> thanos.LabelSet
	12, // 16: thanos.Alert.annotations:type_name -> thanos.LabelSet
	7,  // 17: thanos.Alert.alerts:type_name -> thanos.AlertInstance
	10, // 18: thanos.Alert.last_evaluation:type_name -> thanos.Timestamp
	12, // 19: thanos.RecordingRule.labels:type_name -> thanos.LabelSet
	10, // 20: thanos.RecordingRule.last_evaluation:type_name -> thanos.Timestamp
	2,  // 21: thanos.Rules.Rules:input_type -> thanos.RulesRequest
	3,  // 22: thanos.Rules.Rules:output_type -> thanos.RulesResponse
	22, // [22:23] is the sub-list for method output_type
	21, // [21:22] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_rules_rulespb_rpc_proto_init() }
func file_rules_rulespb_rpc_proto_init() {
	if File_rules_rulespb_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rules_rulespb_rpc_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rules_rulespb_rpc_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rules_rulespb_rpc_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RuleGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rules_rulespb_rpc_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RuleGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rules_rulespb_rpc_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rules_rulespb_rpc_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AlertInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rules_rulespb_rpc_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rules_rulespb_rpc_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RecordingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rules_rulespb_rpc_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rules_rulespb_rpc_proto_msgTypes[1].OneofWrappers = []any{
		(*RulesResponse_Group)(nil),
		(*RulesResponse_Warning)(nil),
	}
	file_rules_rulespb_rpc_proto_msgTypes[4].OneofWrappers = []any{
		(*Rule_Recording)(nil),
		(*Rule_Alert)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rules_rulespb_rpc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rules_rulespb_rpc_proto_goTypes,
		DependencyIndexes: file_rules_rulespb_rpc_proto_depIdxs,
		EnumInfos:         file_rules_rulespb_rpc_proto_enumTypes,
		MessageInfos:      file_rules_rulespb_rpc_proto_msgTypes,
	}.Build()
	File_rules_rulespb_rpc_proto = out.File
	file_rules_rulespb_rpc_proto_rawDesc = nil
	file_rules_rulespb_rpc_proto_goTypes = nil
	file_rules_rulespb_rpc_proto_depIdxs = nil
}
