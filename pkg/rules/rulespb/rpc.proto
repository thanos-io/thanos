// Copyright (c) The Thanos Authors.
// Licensed under the Apache License 2.0.

syntax = "proto3";
package thanos;

import "store/storepb/types.proto";
import "store/labelpb/types.proto";

option go_package = "github.com/thanos-io/thanos/pkg/rules/rulespb";

/// Rules represents API that is responsible for gathering rules and their statuses.
service Rules {
    /// Rules has info for all rules.
    /// Returned rules are expected to include external labels.
    rpc Rules(RulesRequest) returns (stream RulesResponse);
}

message RulesRequest {
    enum Type {
        ALL = 0;
        /// This will make sure strings.ToLower(.String()) will match 'alert' and 'record' values for
        /// Prometheus HTTP API.
        /// NOTE: The implementation has to return empty rule groups as well.
        ALERT  = 1;
        RECORD = 2;
    }
    Type type = 1;
    PartialResponseStrategy partial_response_strategy = 2;
    repeated string matcher_string = 3;
    repeated string rule_name = 4;
    repeated string rule_group = 5;
    repeated string file = 6;
}

message RulesResponse {
    oneof result {
        /// group for rule groups. It is up to server implementation to decide how many of those to put here within single frame.
        RuleGroup group = 1;

        /// warning is considered an information piece in place of series for warning purposes.
        /// It is used to warn rule API users about suspicious cases or partial response (if enabled).
        string warning = 2;
    }
}


/// RuleGroups is set of rule groups.
/// This and below APIs are meant to be used for unmarshaling and marshsaling rules from/to Prometheus API.
/// That's why json tag has to be customized and matching https://github.com/prometheus/prometheus/blob/c530b4b456cc5f9ec249f771dff187eb7715dc9b/web/api/v1/api.go#L955
/// NOTE: See rules_custom_test.go for compatibility tests.
///
/// For rule parsing from YAML configuration other struct is used: https://github.com/prometheus/prometheus/blob/20b1f596f6fb16107ef0c244d240b0ad6da36829/pkg/rulefmt/rulefmt.go#L105
message RuleGroups {
    // @gotags: json:"groups"
    repeated RuleGroup groups = 1;
}

/// RuleGroup has info for rules which are part of a group.
message RuleGroup {
    // @gotags: json:"name"
    string name                               = 1;
    // @gotags: json:"file"
    string file                               = 2;
    // @gotags: json:"rules"
    repeated Rule rules                       = 3;
    // @gotags: json:"interval"
    double interval                           = 4;
    // @gotags: json:"evaluationTime"
    double evaluation_duration_seconds        = 5; // TODO: Is it really second?
    // @gotags: json:"lastEvaluation"
    Timestamp last_evaluation = 6;
    // @gotags: json:"limit"
    int64 limit                               = 9;

    // Thanos specific.
    // @gotags: json:"partialResponseStrategy"
    PartialResponseStrategy PartialResponseStrategy = 8;
}

message Rule {
    oneof result {
        RecordingRule recording = 1;
        Alert alert= 2;
    }
}

/// AlertState represents state of the alert. Has to match 1:1 Prometheus AlertState:
//
// StateInactive is the state of an alert that is neither firing nor pending.
//StateInactive AlertState = iota
// StatePending is the state of an alert that has been active for less than
// the configured threshold duration.
//StatePending
// StateFiring is the state of an alert that has been active for longer than
// the configured threshold duration.
//StateFiring
enum AlertState {
    INACTIVE            = 0;
    PENDING             = 1;
    FIRING              = 2;
}

message AlertInstance {
    // @gotags: json:"labels"
    LabelSet labels                      = 1;
    // @gotags: json:"annotations"
    LabelSet annotations                 = 2;
    // @gotags: json:"state"
    AlertState state                     = 3;
    // @gotags: json:"activeAt,omitempty"
    Timestamp active_at  = 4;
    // @gotags: json:"value"
    string value                         = 5;

    // Thanos specific. Used mainly for alert API purposes.
    // @gotags: json:"partialResponseStrategy"
    PartialResponseStrategy PartialResponseStrategy = 6;
}

message Alert {
    /// state returns the maximum state of alert instances for this rule.
    // @gotags: json:"state"
    AlertState state                          = 1;
    // @gotags: json:"name"
    string name                               = 2;
    // @gotags: json:"query"
    string query                              = 3;
    // @gotags: json:"duration"
    double duration_seconds                   = 4;
    // @gotags: json:"labels"
    LabelSet labels                          = 5;
    // @gotags: json:"annotations"
    LabelSet annotations                     = 6;
    // @gotags: json:"alerts"
    repeated AlertInstance alerts             = 7;
    // @gotags: json:"health"
    string health                             = 8;
    // @gotags: json:"lastError,omitempty"
    string last_error                         = 9;
    // @gotags: json:"evaluationTime"
    double evaluation_duration_seconds        = 10;
    // @gotags: json:"lastEvaluation,omitempty"
    Timestamp last_evaluation = 11;
    // @gotags: json:"keepFiringFor"
    double keep_firing_for_seconds            = 12;
}

message RecordingRule {
    // @gotags: json:"name"
    string name                               = 1;
    // @gotags: json:"query"
    string query                              = 2;
    // @gotags: json:"labels"
    LabelSet labels                           = 3;
    // @gotags: json:"health"
    string health                             = 4;
    // @gotags: json:"lastError,omitempty"
    string last_error                         = 5;
    // @gotags: json:"evaluationTime"
    double evaluation_duration_seconds        = 6;
    // @gotags: json:"lastEvaluation"
    Timestamp last_evaluation = 7;
}

message Timestamp {
    // Represents seconds of UTC time since Unix epoch
    // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59Z inclusive.
    int64 seconds = 1;

    // Non-negative fractions of a second at nanosecond resolution. Negative
    // second values with fractions must still have non-negative nanos values
    // that count forward in time. Must be from 0 to 999,999,999
    // inclusive.
    int32 nanos = 2;
}